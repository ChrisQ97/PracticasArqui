;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 25/09/2018 10:50:49 a. m.
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF003EF6E  	GOTO        1756
0x0004	0x0000      	NOP
0x0006	0x0000      	NOP
0x0008	0xF003EF78  	GOTO        1776
0x000C	0x0000      	NOP
0x000E	0x0000      	NOP
0x0010	0x0000      	NOP
0x0012	0x0000      	NOP
0x0014	0x0000      	NOP
0x0016	0x0000      	NOP
0x0018	0xF003EF91  	GOTO        1826
_BasculacionConIncremento:
;ProyectoDeUnidad1.c,52 :: 		void BasculacionConIncremento()
;ProyectoDeUnidad1.c,54 :: 		int repetir = 0;
0x001C	0x6A1E      	CLRF        BasculacionConIncremento_repetir_L0 
0x001E	0x6A1F      	CLRF        BasculacionConIncremento_repetir_L0+1 
;ProyectoDeUnidad1.c,55 :: 		while (repetir == 0)
L_BasculacionConIncremento6:
0x0020	0x0E00      	MOVLW       0
0x0022	0x181F      	XORWF       BasculacionConIncremento_repetir_L0+1, 0 
0x0024	0xE102      	BNZ         L__BasculacionConIncremento157
0x0026	0x0E00      	MOVLW       0
0x0028	0x181E      	XORWF       BasculacionConIncremento_repetir_L0, 0 
L__BasculacionConIncremento157:
0x002A	0xA4D8      	BTFSS       STATUS, 2 
0x002C	0xD18B      	BRA         L_BasculacionConIncremento7
;ProyectoDeUnidad1.c,58 :: 		for (repeticiones = 0; repeticiones < 2; repeticiones ++)
0x002E	0x6A01      	CLRF        R1 
0x0030	0x6A02      	CLRF        R2 
L_BasculacionConIncremento8:
0x0032	0x0E80      	MOVLW       128
0x0034	0x1802      	XORWF       R2, 0 
0x0036	0x6E00      	MOVWF       R0 
0x0038	0x0E80      	MOVLW       128
0x003A	0x5C00      	SUBWF       R0, 0 
0x003C	0xE102      	BNZ         L__BasculacionConIncremento158
0x003E	0x0E02      	MOVLW       2
0x0040	0x5C01      	SUBWF       R1, 0 
L__BasculacionConIncremento158:
0x0042	0xE219      	BC          L_BasculacionConIncremento9
;ProyectoDeUnidad1.c,60 :: 		SPP0_bit = 1;                        // Encendemos el led
0x0044	0x8083      	BSF         SPP0_bit, BitPos(SPP0_bit+0) 
;ProyectoDeUnidad1.c,62 :: 		continuar = 0;                       // Reinicializamos la variable continuar
0x0046	0x6A1C      	CLRF        _continuar 
0x0048	0x6A1D      	CLRF        _continuar+1 
;ProyectoDeUnidad1.c,63 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x004A	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;ProyectoDeUnidad1.c,64 :: 		while (continuar == 0);              // Esperamos el retraso de un segundo
L_BasculacionConIncremento11:
0x004C	0x0E00      	MOVLW       0
0x004E	0x181D      	XORWF       _continuar+1, 0 
0x0050	0xE102      	BNZ         L__BasculacionConIncremento159
0x0052	0x0E00      	MOVLW       0
0x0054	0x181C      	XORWF       _continuar, 0 
L__BasculacionConIncremento159:
0x0056	0xE101      	BNZ         L_BasculacionConIncremento12
0x0058	0xD7F9      	BRA         L_BasculacionConIncremento11
L_BasculacionConIncremento12:
;ProyectoDeUnidad1.c,66 :: 		SPP0_bit = 0;                        // Apagamos el led
0x005A	0x9083      	BCF         SPP0_bit, BitPos(SPP0_bit+0) 
;ProyectoDeUnidad1.c,68 :: 		continuar = 0;                       // Reinicializamos la variable continuar
0x005C	0x6A1C      	CLRF        _continuar 
0x005E	0x6A1D      	CLRF        _continuar+1 
;ProyectoDeUnidad1.c,69 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x0060	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;ProyectoDeUnidad1.c,70 :: 		while (continuar == 0);              // Esperamos el retraso de un segundo
L_BasculacionConIncremento13:
0x0062	0x0E00      	MOVLW       0
0x0064	0x181D      	XORWF       _continuar+1, 0 
0x0066	0xE102      	BNZ         L__BasculacionConIncremento160
0x0068	0x0E00      	MOVLW       0
0x006A	0x181C      	XORWF       _continuar, 0 
L__BasculacionConIncremento160:
0x006C	0xE101      	BNZ         L_BasculacionConIncremento14
0x006E	0xD7F9      	BRA         L_BasculacionConIncremento13
L_BasculacionConIncremento14:
;ProyectoDeUnidad1.c,58 :: 		for (repeticiones = 0; repeticiones < 2; repeticiones ++)
0x0070	0x4A01      	INFSNZ      R1, 1 
0x0072	0x2A02      	INCF        R2, 1 
;ProyectoDeUnidad1.c,71 :: 		}
0x0074	0xD7DE      	BRA         L_BasculacionConIncremento8
L_BasculacionConIncremento9:
;ProyectoDeUnidad1.c,72 :: 		SPP0_bit = 1;                             // Encendemos el led
0x0076	0x8083      	BSF         SPP0_bit, BitPos(SPP0_bit+0) 
;ProyectoDeUnidad1.c,73 :: 		continuar = 0;                            // Reinicializamos la variable continuar
0x0078	0x6A1C      	CLRF        _continuar 
0x007A	0x6A1D      	CLRF        _continuar+1 
;ProyectoDeUnidad1.c,74 :: 		TMR1ON_bit = 1;                           // Encendemos el timer de TMR1
0x007C	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;ProyectoDeUnidad1.c,75 :: 		while (continuar == 0);                   // Esperamos el retraso de un segundo
L_BasculacionConIncremento15:
0x007E	0x0E00      	MOVLW       0
0x0080	0x181D      	XORWF       _continuar+1, 0 
0x0082	0xE102      	BNZ         L__BasculacionConIncremento161
0x0084	0x0E00      	MOVLW       0
0x0086	0x181C      	XORWF       _continuar, 0 
L__BasculacionConIncremento161:
0x0088	0xE101      	BNZ         L_BasculacionConIncremento16
0x008A	0xD7F9      	BRA         L_BasculacionConIncremento15
L_BasculacionConIncremento16:
;ProyectoDeUnidad1.c,77 :: 		for (repeticiones = 0; repeticiones < 2; repeticiones ++)
0x008C	0x6A01      	CLRF        R1 
0x008E	0x6A02      	CLRF        R2 
L_BasculacionConIncremento17:
0x0090	0x0E80      	MOVLW       128
0x0092	0x1802      	XORWF       R2, 0 
0x0094	0x6E00      	MOVWF       R0 
0x0096	0x0E80      	MOVLW       128
0x0098	0x5C00      	SUBWF       R0, 0 
0x009A	0xE102      	BNZ         L__BasculacionConIncremento162
0x009C	0x0E02      	MOVLW       2
0x009E	0x5C01      	SUBWF       R1, 0 
L__BasculacionConIncremento162:
0x00A0	0xE219      	BC          L_BasculacionConIncremento18
;ProyectoDeUnidad1.c,79 :: 		SPP1_bit = 1;                        // Encendemos el led
0x00A2	0x8283      	BSF         SPP1_bit, BitPos(SPP1_bit+0) 
;ProyectoDeUnidad1.c,81 :: 		continuar = 0;                       // Reinicializamos la variable continuar
0x00A4	0x6A1C      	CLRF        _continuar 
0x00A6	0x6A1D      	CLRF        _continuar+1 
;ProyectoDeUnidad1.c,82 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x00A8	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;ProyectoDeUnidad1.c,83 :: 		while (continuar == 0);              // Esperamos el retraso de un segundo
L_BasculacionConIncremento20:
0x00AA	0x0E00      	MOVLW       0
0x00AC	0x181D      	XORWF       _continuar+1, 0 
0x00AE	0xE102      	BNZ         L__BasculacionConIncremento163
0x00B0	0x0E00      	MOVLW       0
0x00B2	0x181C      	XORWF       _continuar, 0 
L__BasculacionConIncremento163:
0x00B4	0xE101      	BNZ         L_BasculacionConIncremento21
0x00B6	0xD7F9      	BRA         L_BasculacionConIncremento20
L_BasculacionConIncremento21:
;ProyectoDeUnidad1.c,85 :: 		SPP1_bit = 0;                        // Apagamos el led
0x00B8	0x9283      	BCF         SPP1_bit, BitPos(SPP1_bit+0) 
;ProyectoDeUnidad1.c,87 :: 		continuar = 0;                       // Reinicializamos la variable continuar
0x00BA	0x6A1C      	CLRF        _continuar 
0x00BC	0x6A1D      	CLRF        _continuar+1 
;ProyectoDeUnidad1.c,88 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x00BE	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;ProyectoDeUnidad1.c,89 :: 		while (continuar == 0);              // Esperamos el retraso de un segundo
L_BasculacionConIncremento22:
0x00C0	0x0E00      	MOVLW       0
0x00C2	0x181D      	XORWF       _continuar+1, 0 
0x00C4	0xE102      	BNZ         L__BasculacionConIncremento164
0x00C6	0x0E00      	MOVLW       0
0x00C8	0x181C      	XORWF       _continuar, 0 
L__BasculacionConIncremento164:
0x00CA	0xE101      	BNZ         L_BasculacionConIncremento23
0x00CC	0xD7F9      	BRA         L_BasculacionConIncremento22
L_BasculacionConIncremento23:
;ProyectoDeUnidad1.c,77 :: 		for (repeticiones = 0; repeticiones < 2; repeticiones ++)
0x00CE	0x4A01      	INFSNZ      R1, 1 
0x00D0	0x2A02      	INCF        R2, 1 
;ProyectoDeUnidad1.c,90 :: 		}
0x00D2	0xD7DE      	BRA         L_BasculacionConIncremento17
L_BasculacionConIncremento18:
;ProyectoDeUnidad1.c,91 :: 		SPP1_bit = 1;                             // Encendemos el led
0x00D4	0x8283      	BSF         SPP1_bit, BitPos(SPP1_bit+0) 
;ProyectoDeUnidad1.c,92 :: 		continuar = 0;                            // Reinicializamos la variable continuar
0x00D6	0x6A1C      	CLRF        _continuar 
0x00D8	0x6A1D      	CLRF        _continuar+1 
;ProyectoDeUnidad1.c,93 :: 		TMR1ON_bit = 1;                           // Encendemos el timer de TMR1
0x00DA	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;ProyectoDeUnidad1.c,94 :: 		while (continuar == 0);                   // Esperamos el retraso de un segundo
L_BasculacionConIncremento24:
0x00DC	0x0E00      	MOVLW       0
0x00DE	0x181D      	XORWF       _continuar+1, 0 
0x00E0	0xE102      	BNZ         L__BasculacionConIncremento165
0x00E2	0x0E00      	MOVLW       0
0x00E4	0x181C      	XORWF       _continuar, 0 
L__BasculacionConIncremento165:
0x00E6	0xE101      	BNZ         L_BasculacionConIncremento25
0x00E8	0xD7F9      	BRA         L_BasculacionConIncremento24
L_BasculacionConIncremento25:
;ProyectoDeUnidad1.c,96 :: 		for (repeticiones = 0; repeticiones < 2; repeticiones ++)
0x00EA	0x6A01      	CLRF        R1 
0x00EC	0x6A02      	CLRF        R2 
L_BasculacionConIncremento26:
0x00EE	0x0E80      	MOVLW       128
0x00F0	0x1802      	XORWF       R2, 0 
0x00F2	0x6E00      	MOVWF       R0 
0x00F4	0x0E80      	MOVLW       128
0x00F6	0x5C00      	SUBWF       R0, 0 
0x00F8	0xE102      	BNZ         L__BasculacionConIncremento166
0x00FA	0x0E02      	MOVLW       2
0x00FC	0x5C01      	SUBWF       R1, 0 
L__BasculacionConIncremento166:
0x00FE	0xE219      	BC          L_BasculacionConIncremento27
;ProyectoDeUnidad1.c,98 :: 		SPP2_bit = 1;                        // Encendemos el led
0x0100	0x8483      	BSF         SPP2_bit, BitPos(SPP2_bit+0) 
;ProyectoDeUnidad1.c,100 :: 		continuar = 0;                       // Reinicializamos la variable continuar
0x0102	0x6A1C      	CLRF        _continuar 
0x0104	0x6A1D      	CLRF        _continuar+1 
;ProyectoDeUnidad1.c,101 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x0106	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;ProyectoDeUnidad1.c,102 :: 		while (continuar == 0);              // Esperamos el retraso de un segundo
L_BasculacionConIncremento29:
0x0108	0x0E00      	MOVLW       0
0x010A	0x181D      	XORWF       _continuar+1, 0 
0x010C	0xE102      	BNZ         L__BasculacionConIncremento167
0x010E	0x0E00      	MOVLW       0
0x0110	0x181C      	XORWF       _continuar, 0 
L__BasculacionConIncremento167:
0x0112	0xE101      	BNZ         L_BasculacionConIncremento30
0x0114	0xD7F9      	BRA         L_BasculacionConIncremento29
L_BasculacionConIncremento30:
;ProyectoDeUnidad1.c,104 :: 		SPP2_bit = 0;                        // Apagamos el led
0x0116	0x9483      	BCF         SPP2_bit, BitPos(SPP2_bit+0) 
;ProyectoDeUnidad1.c,106 :: 		continuar = 0;                       // Reinicializamos la variable continuar
0x0118	0x6A1C      	CLRF        _continuar 
0x011A	0x6A1D      	CLRF        _continuar+1 
;ProyectoDeUnidad1.c,107 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x011C	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;ProyectoDeUnidad1.c,108 :: 		while (continuar == 0);              // Esperamos el retraso de un segundo
L_BasculacionConIncremento31:
0x011E	0x0E00      	MOVLW       0
0x0120	0x181D      	XORWF       _continuar+1, 0 
0x0122	0xE102      	BNZ         L__BasculacionConIncremento168
0x0124	0x0E00      	MOVLW       0
0x0126	0x181C      	XORWF       _continuar, 0 
L__BasculacionConIncremento168:
0x0128	0xE101      	BNZ         L_BasculacionConIncremento32
0x012A	0xD7F9      	BRA         L_BasculacionConIncremento31
L_BasculacionConIncremento32:
;ProyectoDeUnidad1.c,96 :: 		for (repeticiones = 0; repeticiones < 2; repeticiones ++)
0x012C	0x4A01      	INFSNZ      R1, 1 
0x012E	0x2A02      	INCF        R2, 1 
;ProyectoDeUnidad1.c,109 :: 		}
0x0130	0xD7DE      	BRA         L_BasculacionConIncremento26
L_BasculacionConIncremento27:
;ProyectoDeUnidad1.c,110 :: 		SPP2_bit = 1;                             // Encendemos el led
0x0132	0x8483      	BSF         SPP2_bit, BitPos(SPP2_bit+0) 
;ProyectoDeUnidad1.c,111 :: 		continuar = 0;                            // Reinicializamos la variable continuar
0x0134	0x6A1C      	CLRF        _continuar 
0x0136	0x6A1D      	CLRF        _continuar+1 
;ProyectoDeUnidad1.c,112 :: 		TMR1ON_bit = 1;                           // Encendemos el timer de TMR1
0x0138	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;ProyectoDeUnidad1.c,113 :: 		while (continuar == 0);                   // Esperamos el retraso de un segundo
L_BasculacionConIncremento33:
0x013A	0x0E00      	MOVLW       0
0x013C	0x181D      	XORWF       _continuar+1, 0 
0x013E	0xE102      	BNZ         L__BasculacionConIncremento169
0x0140	0x0E00      	MOVLW       0
0x0142	0x181C      	XORWF       _continuar, 0 
L__BasculacionConIncremento169:
0x0144	0xE101      	BNZ         L_BasculacionConIncremento34
0x0146	0xD7F9      	BRA         L_BasculacionConIncremento33
L_BasculacionConIncremento34:
;ProyectoDeUnidad1.c,115 :: 		for (repeticiones = 0; repeticiones < 2; repeticiones ++)
0x0148	0x6A01      	CLRF        R1 
0x014A	0x6A02      	CLRF        R2 
L_BasculacionConIncremento35:
0x014C	0x0E80      	MOVLW       128
0x014E	0x1802      	XORWF       R2, 0 
0x0150	0x6E00      	MOVWF       R0 
0x0152	0x0E80      	MOVLW       128
0x0154	0x5C00      	SUBWF       R0, 0 
0x0156	0xE102      	BNZ         L__BasculacionConIncremento170
0x0158	0x0E02      	MOVLW       2
0x015A	0x5C01      	SUBWF       R1, 0 
L__BasculacionConIncremento170:
0x015C	0xE219      	BC          L_BasculacionConIncremento36
;ProyectoDeUnidad1.c,117 :: 		SPP3_bit = 1;                        // Encendemos el led
0x015E	0x8683      	BSF         SPP3_bit, BitPos(SPP3_bit+0) 
;ProyectoDeUnidad1.c,119 :: 		continuar = 0;                       // Reinicializamos la variable continuar
0x0160	0x6A1C      	CLRF        _continuar 
0x0162	0x6A1D      	CLRF        _continuar+1 
;ProyectoDeUnidad1.c,120 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x0164	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;ProyectoDeUnidad1.c,121 :: 		while (continuar == 0);              // Esperamos el retraso de un segundo
L_BasculacionConIncremento38:
0x0166	0x0E00      	MOVLW       0
0x0168	0x181D      	XORWF       _continuar+1, 0 
0x016A	0xE102      	BNZ         L__BasculacionConIncremento171
0x016C	0x0E00      	MOVLW       0
0x016E	0x181C      	XORWF       _continuar, 0 
L__BasculacionConIncremento171:
0x0170	0xE101      	BNZ         L_BasculacionConIncremento39
0x0172	0xD7F9      	BRA         L_BasculacionConIncremento38
L_BasculacionConIncremento39:
;ProyectoDeUnidad1.c,123 :: 		SPP3_bit = 0;                        // Apagamos el led
0x0174	0x9683      	BCF         SPP3_bit, BitPos(SPP3_bit+0) 
;ProyectoDeUnidad1.c,125 :: 		continuar = 0;                       // Reinicializamos la variable continuar
0x0176	0x6A1C      	CLRF        _continuar 
0x0178	0x6A1D      	CLRF        _continuar+1 
;ProyectoDeUnidad1.c,126 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x017A	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;ProyectoDeUnidad1.c,127 :: 		while (continuar == 0);              // Esperamos el retraso de un segundo
L_BasculacionConIncremento40:
0x017C	0x0E00      	MOVLW       0
0x017E	0x181D      	XORWF       _continuar+1, 0 
0x0180	0xE102      	BNZ         L__BasculacionConIncremento172
0x0182	0x0E00      	MOVLW       0
0x0184	0x181C      	XORWF       _continuar, 0 
L__BasculacionConIncremento172:
0x0186	0xE101      	BNZ         L_BasculacionConIncremento41
0x0188	0xD7F9      	BRA         L_BasculacionConIncremento40
L_BasculacionConIncremento41:
;ProyectoDeUnidad1.c,115 :: 		for (repeticiones = 0; repeticiones < 2; repeticiones ++)
0x018A	0x4A01      	INFSNZ      R1, 1 
0x018C	0x2A02      	INCF        R2, 1 
;ProyectoDeUnidad1.c,128 :: 		}
0x018E	0xD7DE      	BRA         L_BasculacionConIncremento35
L_BasculacionConIncremento36:
;ProyectoDeUnidad1.c,129 :: 		SPP3_bit = 1;                             // Encendemos el led
0x0190	0x8683      	BSF         SPP3_bit, BitPos(SPP3_bit+0) 
;ProyectoDeUnidad1.c,130 :: 		continuar = 0;                            // Reinicializamos la variable continuar
0x0192	0x6A1C      	CLRF        _continuar 
0x0194	0x6A1D      	CLRF        _continuar+1 
;ProyectoDeUnidad1.c,131 :: 		TMR1ON_bit = 1;                           // Encendemos el timer de TMR1
0x0196	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;ProyectoDeUnidad1.c,132 :: 		while (continuar == 0);                   // Esperamos el retraso de un segundo
L_BasculacionConIncremento42:
0x0198	0x0E00      	MOVLW       0
0x019A	0x181D      	XORWF       _continuar+1, 0 
0x019C	0xE102      	BNZ         L__BasculacionConIncremento173
0x019E	0x0E00      	MOVLW       0
0x01A0	0x181C      	XORWF       _continuar, 0 
L__BasculacionConIncremento173:
0x01A2	0xE101      	BNZ         L_BasculacionConIncremento43
0x01A4	0xD7F9      	BRA         L_BasculacionConIncremento42
L_BasculacionConIncremento43:
;ProyectoDeUnidad1.c,134 :: 		for (repeticiones = 0; repeticiones < 2; repeticiones ++)
0x01A6	0x6A01      	CLRF        R1 
0x01A8	0x6A02      	CLRF        R2 
L_BasculacionConIncremento44:
0x01AA	0x0E80      	MOVLW       128
0x01AC	0x1802      	XORWF       R2, 0 
0x01AE	0x6E00      	MOVWF       R0 
0x01B0	0x0E80      	MOVLW       128
0x01B2	0x5C00      	SUBWF       R0, 0 
0x01B4	0xE102      	BNZ         L__BasculacionConIncremento174
0x01B6	0x0E02      	MOVLW       2
0x01B8	0x5C01      	SUBWF       R1, 0 
L__BasculacionConIncremento174:
0x01BA	0xE219      	BC          L_BasculacionConIncremento45
;ProyectoDeUnidad1.c,136 :: 		SPP4_bit = 1;                        // Encendemos el led
0x01BC	0x8883      	BSF         SPP4_bit, BitPos(SPP4_bit+0) 
;ProyectoDeUnidad1.c,138 :: 		continuar = 0;                       // Reinicializamos la variable continuar
0x01BE	0x6A1C      	CLRF        _continuar 
0x01C0	0x6A1D      	CLRF        _continuar+1 
;ProyectoDeUnidad1.c,139 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x01C2	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;ProyectoDeUnidad1.c,140 :: 		while (continuar == 0);              // Esperamos el retraso de un segundo
L_BasculacionConIncremento47:
0x01C4	0x0E00      	MOVLW       0
0x01C6	0x181D      	XORWF       _continuar+1, 0 
0x01C8	0xE102      	BNZ         L__BasculacionConIncremento175
0x01CA	0x0E00      	MOVLW       0
0x01CC	0x181C      	XORWF       _continuar, 0 
L__BasculacionConIncremento175:
0x01CE	0xE101      	BNZ         L_BasculacionConIncremento48
0x01D0	0xD7F9      	BRA         L_BasculacionConIncremento47
L_BasculacionConIncremento48:
;ProyectoDeUnidad1.c,142 :: 		SPP4_bit = 0;                        // Apagamos el led
0x01D2	0x9883      	BCF         SPP4_bit, BitPos(SPP4_bit+0) 
;ProyectoDeUnidad1.c,144 :: 		continuar = 0;                       // Reinicializamos la variable continuar
0x01D4	0x6A1C      	CLRF        _continuar 
0x01D6	0x6A1D      	CLRF        _continuar+1 
;ProyectoDeUnidad1.c,145 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x01D8	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;ProyectoDeUnidad1.c,146 :: 		while (continuar == 0);              // Esperamos el retraso de un segundo
L_BasculacionConIncremento49:
0x01DA	0x0E00      	MOVLW       0
0x01DC	0x181D      	XORWF       _continuar+1, 0 
0x01DE	0xE102      	BNZ         L__BasculacionConIncremento176
0x01E0	0x0E00      	MOVLW       0
0x01E2	0x181C      	XORWF       _continuar, 0 
L__BasculacionConIncremento176:
0x01E4	0xE101      	BNZ         L_BasculacionConIncremento50
0x01E6	0xD7F9      	BRA         L_BasculacionConIncremento49
L_BasculacionConIncremento50:
;ProyectoDeUnidad1.c,134 :: 		for (repeticiones = 0; repeticiones < 2; repeticiones ++)
0x01E8	0x4A01      	INFSNZ      R1, 1 
0x01EA	0x2A02      	INCF        R2, 1 
;ProyectoDeUnidad1.c,147 :: 		}
0x01EC	0xD7DE      	BRA         L_BasculacionConIncremento44
L_BasculacionConIncremento45:
;ProyectoDeUnidad1.c,148 :: 		SPP4_bit = 1;                             // Encendemos el led
0x01EE	0x8883      	BSF         SPP4_bit, BitPos(SPP4_bit+0) 
;ProyectoDeUnidad1.c,149 :: 		continuar = 0;                            // Reinicializamos la variable continuar
0x01F0	0x6A1C      	CLRF        _continuar 
0x01F2	0x6A1D      	CLRF        _continuar+1 
;ProyectoDeUnidad1.c,150 :: 		TMR1ON_bit = 1;                           // Encendemos el timer de TMR1
0x01F4	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;ProyectoDeUnidad1.c,151 :: 		while (continuar == 0);                   // Esperamos el retraso de un segundo
L_BasculacionConIncremento51:
0x01F6	0x0E00      	MOVLW       0
0x01F8	0x181D      	XORWF       _continuar+1, 0 
0x01FA	0xE102      	BNZ         L__BasculacionConIncremento177
0x01FC	0x0E00      	MOVLW       0
0x01FE	0x181C      	XORWF       _continuar, 0 
L__BasculacionConIncremento177:
0x0200	0xE101      	BNZ         L_BasculacionConIncremento52
0x0202	0xD7F9      	BRA         L_BasculacionConIncremento51
L_BasculacionConIncremento52:
;ProyectoDeUnidad1.c,153 :: 		for (repeticiones = 0; repeticiones < 2; repeticiones ++)
0x0204	0x6A01      	CLRF        R1 
0x0206	0x6A02      	CLRF        R2 
L_BasculacionConIncremento53:
0x0208	0x0E80      	MOVLW       128
0x020A	0x1802      	XORWF       R2, 0 
0x020C	0x6E00      	MOVWF       R0 
0x020E	0x0E80      	MOVLW       128
0x0210	0x5C00      	SUBWF       R0, 0 
0x0212	0xE102      	BNZ         L__BasculacionConIncremento178
0x0214	0x0E02      	MOVLW       2
0x0216	0x5C01      	SUBWF       R1, 0 
L__BasculacionConIncremento178:
0x0218	0xE219      	BC          L_BasculacionConIncremento54
;ProyectoDeUnidad1.c,155 :: 		SPP5_bit = 1;                        // Encendemos el led
0x021A	0x8A83      	BSF         SPP5_bit, BitPos(SPP5_bit+0) 
;ProyectoDeUnidad1.c,157 :: 		continuar = 0;                       // Reinicializamos la variable continuar
0x021C	0x6A1C      	CLRF        _continuar 
0x021E	0x6A1D      	CLRF        _continuar+1 
;ProyectoDeUnidad1.c,158 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x0220	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;ProyectoDeUnidad1.c,159 :: 		while (continuar == 0);              // Esperamos el retraso de un segundo
L_BasculacionConIncremento56:
0x0222	0x0E00      	MOVLW       0
0x0224	0x181D      	XORWF       _continuar+1, 0 
0x0226	0xE102      	BNZ         L__BasculacionConIncremento179
0x0228	0x0E00      	MOVLW       0
0x022A	0x181C      	XORWF       _continuar, 0 
L__BasculacionConIncremento179:
0x022C	0xE101      	BNZ         L_BasculacionConIncremento57
0x022E	0xD7F9      	BRA         L_BasculacionConIncremento56
L_BasculacionConIncremento57:
;ProyectoDeUnidad1.c,161 :: 		SPP5_bit = 0;                        // Apagamos el led
0x0230	0x9A83      	BCF         SPP5_bit, BitPos(SPP5_bit+0) 
;ProyectoDeUnidad1.c,163 :: 		continuar = 0;                       // Reinicializamos la variable continuar
0x0232	0x6A1C      	CLRF        _continuar 
0x0234	0x6A1D      	CLRF        _continuar+1 
;ProyectoDeUnidad1.c,164 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x0236	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;ProyectoDeUnidad1.c,165 :: 		while (continuar == 0);              // Esperamos el retraso de un segundo
L_BasculacionConIncremento58:
0x0238	0x0E00      	MOVLW       0
0x023A	0x181D      	XORWF       _continuar+1, 0 
0x023C	0xE102      	BNZ         L__BasculacionConIncremento180
0x023E	0x0E00      	MOVLW       0
0x0240	0x181C      	XORWF       _continuar, 0 
L__BasculacionConIncremento180:
0x0242	0xE101      	BNZ         L_BasculacionConIncremento59
0x0244	0xD7F9      	BRA         L_BasculacionConIncremento58
L_BasculacionConIncremento59:
;ProyectoDeUnidad1.c,153 :: 		for (repeticiones = 0; repeticiones < 2; repeticiones ++)
0x0246	0x4A01      	INFSNZ      R1, 1 
0x0248	0x2A02      	INCF        R2, 1 
;ProyectoDeUnidad1.c,166 :: 		}
0x024A	0xD7DE      	BRA         L_BasculacionConIncremento53
L_BasculacionConIncremento54:
;ProyectoDeUnidad1.c,167 :: 		SPP5_bit = 1;                             // Encendemos el led
0x024C	0x8A83      	BSF         SPP5_bit, BitPos(SPP5_bit+0) 
;ProyectoDeUnidad1.c,168 :: 		continuar = 0;                            // Reinicializamos la variable continuar
0x024E	0x6A1C      	CLRF        _continuar 
0x0250	0x6A1D      	CLRF        _continuar+1 
;ProyectoDeUnidad1.c,169 :: 		TMR1ON_bit = 1;                           // Encendemos el timer de TMR1
0x0252	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;ProyectoDeUnidad1.c,170 :: 		while (continuar == 0);                   // Esperamos el retraso de un segundo
L_BasculacionConIncremento60:
0x0254	0x0E00      	MOVLW       0
0x0256	0x181D      	XORWF       _continuar+1, 0 
0x0258	0xE102      	BNZ         L__BasculacionConIncremento181
0x025A	0x0E00      	MOVLW       0
0x025C	0x181C      	XORWF       _continuar, 0 
L__BasculacionConIncremento181:
0x025E	0xE101      	BNZ         L_BasculacionConIncremento61
0x0260	0xD7F9      	BRA         L_BasculacionConIncremento60
L_BasculacionConIncremento61:
;ProyectoDeUnidad1.c,172 :: 		for (repeticiones = 0; repeticiones < 2; repeticiones ++)
0x0262	0x6A01      	CLRF        R1 
0x0264	0x6A02      	CLRF        R2 
L_BasculacionConIncremento62:
0x0266	0x0E80      	MOVLW       128
0x0268	0x1802      	XORWF       R2, 0 
0x026A	0x6E00      	MOVWF       R0 
0x026C	0x0E80      	MOVLW       128
0x026E	0x5C00      	SUBWF       R0, 0 
0x0270	0xE102      	BNZ         L__BasculacionConIncremento182
0x0272	0x0E02      	MOVLW       2
0x0274	0x5C01      	SUBWF       R1, 0 
L__BasculacionConIncremento182:
0x0276	0xE219      	BC          L_BasculacionConIncremento63
;ProyectoDeUnidad1.c,174 :: 		SPP6_bit = 1;                        // Encendemos el led
0x0278	0x8C83      	BSF         SPP6_bit, BitPos(SPP6_bit+0) 
;ProyectoDeUnidad1.c,176 :: 		continuar = 0;                       // Reinicializamos la variable continuar
0x027A	0x6A1C      	CLRF        _continuar 
0x027C	0x6A1D      	CLRF        _continuar+1 
;ProyectoDeUnidad1.c,177 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x027E	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;ProyectoDeUnidad1.c,178 :: 		while (continuar == 0);              // Esperamos el retraso de un segundo
L_BasculacionConIncremento65:
0x0280	0x0E00      	MOVLW       0
0x0282	0x181D      	XORWF       _continuar+1, 0 
0x0284	0xE102      	BNZ         L__BasculacionConIncremento183
0x0286	0x0E00      	MOVLW       0
0x0288	0x181C      	XORWF       _continuar, 0 
L__BasculacionConIncremento183:
0x028A	0xE101      	BNZ         L_BasculacionConIncremento66
0x028C	0xD7F9      	BRA         L_BasculacionConIncremento65
L_BasculacionConIncremento66:
;ProyectoDeUnidad1.c,180 :: 		SPP6_bit = 0;                        // Apagamos el led
0x028E	0x9C83      	BCF         SPP6_bit, BitPos(SPP6_bit+0) 
;ProyectoDeUnidad1.c,182 :: 		continuar = 0;                       // Reinicializamos la variable continuar
0x0290	0x6A1C      	CLRF        _continuar 
0x0292	0x6A1D      	CLRF        _continuar+1 
;ProyectoDeUnidad1.c,183 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x0294	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;ProyectoDeUnidad1.c,184 :: 		while (continuar == 0);              // Esperamos el retraso de un segundo
L_BasculacionConIncremento67:
0x0296	0x0E00      	MOVLW       0
0x0298	0x181D      	XORWF       _continuar+1, 0 
0x029A	0xE102      	BNZ         L__BasculacionConIncremento184
0x029C	0x0E00      	MOVLW       0
0x029E	0x181C      	XORWF       _continuar, 0 
L__BasculacionConIncremento184:
0x02A0	0xE101      	BNZ         L_BasculacionConIncremento68
0x02A2	0xD7F9      	BRA         L_BasculacionConIncremento67
L_BasculacionConIncremento68:
;ProyectoDeUnidad1.c,172 :: 		for (repeticiones = 0; repeticiones < 2; repeticiones ++)
0x02A4	0x4A01      	INFSNZ      R1, 1 
0x02A6	0x2A02      	INCF        R2, 1 
;ProyectoDeUnidad1.c,185 :: 		}
0x02A8	0xD7DE      	BRA         L_BasculacionConIncremento62
L_BasculacionConIncremento63:
;ProyectoDeUnidad1.c,186 :: 		SPP6_bit = 1;                             // Encendemos el led
0x02AA	0x8C83      	BSF         SPP6_bit, BitPos(SPP6_bit+0) 
;ProyectoDeUnidad1.c,187 :: 		continuar = 0;                            // Reinicializamos la variable continuar
0x02AC	0x6A1C      	CLRF        _continuar 
0x02AE	0x6A1D      	CLRF        _continuar+1 
;ProyectoDeUnidad1.c,188 :: 		TMR1ON_bit = 1;                           // Encendemos el timer de TMR1
0x02B0	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;ProyectoDeUnidad1.c,189 :: 		while (continuar == 0);                   // Esperamos el retraso de un segundo
L_BasculacionConIncremento69:
0x02B2	0x0E00      	MOVLW       0
0x02B4	0x181D      	XORWF       _continuar+1, 0 
0x02B6	0xE102      	BNZ         L__BasculacionConIncremento185
0x02B8	0x0E00      	MOVLW       0
0x02BA	0x181C      	XORWF       _continuar, 0 
L__BasculacionConIncremento185:
0x02BC	0xE101      	BNZ         L_BasculacionConIncremento70
0x02BE	0xD7F9      	BRA         L_BasculacionConIncremento69
L_BasculacionConIncremento70:
;ProyectoDeUnidad1.c,191 :: 		for (repeticiones = 0; repeticiones < 2; repeticiones ++)
0x02C0	0x6A01      	CLRF        R1 
0x02C2	0x6A02      	CLRF        R2 
L_BasculacionConIncremento71:
0x02C4	0x0E80      	MOVLW       128
0x02C6	0x1802      	XORWF       R2, 0 
0x02C8	0x6E00      	MOVWF       R0 
0x02CA	0x0E80      	MOVLW       128
0x02CC	0x5C00      	SUBWF       R0, 0 
0x02CE	0xE102      	BNZ         L__BasculacionConIncremento186
0x02D0	0x0E02      	MOVLW       2
0x02D2	0x5C01      	SUBWF       R1, 0 
L__BasculacionConIncremento186:
0x02D4	0xE219      	BC          L_BasculacionConIncremento72
;ProyectoDeUnidad1.c,193 :: 		SPP7_bit = 1;                        // Encendemos el led
0x02D6	0x8E83      	BSF         SPP7_bit, BitPos(SPP7_bit+0) 
;ProyectoDeUnidad1.c,195 :: 		continuar = 0;                       // Reinicializamos la variable continuar
0x02D8	0x6A1C      	CLRF        _continuar 
0x02DA	0x6A1D      	CLRF        _continuar+1 
;ProyectoDeUnidad1.c,196 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x02DC	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;ProyectoDeUnidad1.c,197 :: 		while (continuar == 0);              // Esperamos el retraso de un segundo
L_BasculacionConIncremento74:
0x02DE	0x0E00      	MOVLW       0
0x02E0	0x181D      	XORWF       _continuar+1, 0 
0x02E2	0xE102      	BNZ         L__BasculacionConIncremento187
0x02E4	0x0E00      	MOVLW       0
0x02E6	0x181C      	XORWF       _continuar, 0 
L__BasculacionConIncremento187:
0x02E8	0xE101      	BNZ         L_BasculacionConIncremento75
0x02EA	0xD7F9      	BRA         L_BasculacionConIncremento74
L_BasculacionConIncremento75:
;ProyectoDeUnidad1.c,199 :: 		SPP7_bit = 0;                        // Apagamos el led
0x02EC	0x9E83      	BCF         SPP7_bit, BitPos(SPP7_bit+0) 
;ProyectoDeUnidad1.c,201 :: 		continuar = 0;                       // Reinicializamos la variable continuar
0x02EE	0x6A1C      	CLRF        _continuar 
0x02F0	0x6A1D      	CLRF        _continuar+1 
;ProyectoDeUnidad1.c,202 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x02F2	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;ProyectoDeUnidad1.c,203 :: 		while (continuar == 0);              // Esperamos el retraso de un segundo
L_BasculacionConIncremento76:
0x02F4	0x0E00      	MOVLW       0
0x02F6	0x181D      	XORWF       _continuar+1, 0 
0x02F8	0xE102      	BNZ         L__BasculacionConIncremento188
0x02FA	0x0E00      	MOVLW       0
0x02FC	0x181C      	XORWF       _continuar, 0 
L__BasculacionConIncremento188:
0x02FE	0xE101      	BNZ         L_BasculacionConIncremento77
0x0300	0xD7F9      	BRA         L_BasculacionConIncremento76
L_BasculacionConIncremento77:
;ProyectoDeUnidad1.c,191 :: 		for (repeticiones = 0; repeticiones < 2; repeticiones ++)
0x0302	0x4A01      	INFSNZ      R1, 1 
0x0304	0x2A02      	INCF        R2, 1 
;ProyectoDeUnidad1.c,204 :: 		}
0x0306	0xD7DE      	BRA         L_BasculacionConIncremento71
L_BasculacionConIncremento72:
;ProyectoDeUnidad1.c,205 :: 		SPP7_bit = 1;                             // Encendemos el led
0x0308	0x8E83      	BSF         SPP7_bit, BitPos(SPP7_bit+0) 
;ProyectoDeUnidad1.c,206 :: 		continuar = 0;                            // Reinicializamos la variable continuar
0x030A	0x6A1C      	CLRF        _continuar 
0x030C	0x6A1D      	CLRF        _continuar+1 
;ProyectoDeUnidad1.c,207 :: 		TMR1ON_bit = 1;                           // Encendemos el timer de TMR1
0x030E	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;ProyectoDeUnidad1.c,208 :: 		while (continuar == 0);                   // Esperamos el retraso de un segundo
L_BasculacionConIncremento78:
0x0310	0x0E00      	MOVLW       0
0x0312	0x181D      	XORWF       _continuar+1, 0 
0x0314	0xE102      	BNZ         L__BasculacionConIncremento189
0x0316	0x0E00      	MOVLW       0
0x0318	0x181C      	XORWF       _continuar, 0 
L__BasculacionConIncremento189:
0x031A	0xE101      	BNZ         L_BasculacionConIncremento79
0x031C	0xD7F9      	BRA         L_BasculacionConIncremento78
L_BasculacionConIncremento79:
;ProyectoDeUnidad1.c,211 :: 		SPP0_bit = 0;
0x031E	0x9083      	BCF         SPP0_bit, BitPos(SPP0_bit+0) 
;ProyectoDeUnidad1.c,212 :: 		SPP1_bit = 0;
0x0320	0x9283      	BCF         SPP1_bit, BitPos(SPP1_bit+0) 
;ProyectoDeUnidad1.c,213 :: 		SPP2_bit = 0;
0x0322	0x9483      	BCF         SPP2_bit, BitPos(SPP2_bit+0) 
;ProyectoDeUnidad1.c,214 :: 		SPP3_bit = 0;
0x0324	0x9683      	BCF         SPP3_bit, BitPos(SPP3_bit+0) 
;ProyectoDeUnidad1.c,215 :: 		SPP4_bit = 0;
0x0326	0x9883      	BCF         SPP4_bit, BitPos(SPP4_bit+0) 
;ProyectoDeUnidad1.c,216 :: 		SPP5_bit = 0;
0x0328	0x9A83      	BCF         SPP5_bit, BitPos(SPP5_bit+0) 
;ProyectoDeUnidad1.c,217 :: 		SPP6_bit = 0;
0x032A	0x9C83      	BCF         SPP6_bit, BitPos(SPP6_bit+0) 
;ProyectoDeUnidad1.c,218 :: 		SPP7_bit = 0;
0x032C	0x9E83      	BCF         SPP7_bit, BitPos(SPP7_bit+0) 
;ProyectoDeUnidad1.c,221 :: 		continuar = 0;                            // Reinicializamos la variable continuar
0x032E	0x6A1C      	CLRF        _continuar 
0x0330	0x6A1D      	CLRF        _continuar+1 
;ProyectoDeUnidad1.c,222 :: 		TMR1ON_bit = 1;                           // Encendemos el timer de TMR1
0x0332	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;ProyectoDeUnidad1.c,223 :: 		while (continuar == 0);                   // Esperamos el retraso de un segundo
L_BasculacionConIncremento80:
0x0334	0x0E00      	MOVLW       0
0x0336	0x181D      	XORWF       _continuar+1, 0 
0x0338	0xE102      	BNZ         L__BasculacionConIncremento190
0x033A	0x0E00      	MOVLW       0
0x033C	0x181C      	XORWF       _continuar, 0 
L__BasculacionConIncremento190:
0x033E	0xE101      	BNZ         L_BasculacionConIncremento81
0x0340	0xD7F9      	BRA         L_BasculacionConIncremento80
L_BasculacionConIncremento81:
;ProyectoDeUnidad1.c,224 :: 		}
0x0342	0xD66E      	BRA         L_BasculacionConIncremento6
L_BasculacionConIncremento7:
;ProyectoDeUnidad1.c,225 :: 		}
L_end_BasculacionConIncremento:
0x0344	0x0012      	RETURN      0
; end of _BasculacionConIncremento
_ApagarLeds:
;ProyectoDeUnidad1.c,414 :: 		ApagarLeds()
;ProyectoDeUnidad1.c,416 :: 		SPP0_bit = 0;
0x0346	0x9083      	BCF         SPP0_bit, BitPos(SPP0_bit+0) 
;ProyectoDeUnidad1.c,417 :: 		SPP1_bit = 0;
0x0348	0x9283      	BCF         SPP1_bit, BitPos(SPP1_bit+0) 
;ProyectoDeUnidad1.c,418 :: 		SPP2_bit = 0;
0x034A	0x9483      	BCF         SPP2_bit, BitPos(SPP2_bit+0) 
;ProyectoDeUnidad1.c,419 :: 		SPP3_bit = 0;
0x034C	0x9683      	BCF         SPP3_bit, BitPos(SPP3_bit+0) 
;ProyectoDeUnidad1.c,420 :: 		SPP4_bit = 0;
0x034E	0x9883      	BCF         SPP4_bit, BitPos(SPP4_bit+0) 
;ProyectoDeUnidad1.c,421 :: 		SPP5_bit = 0;
0x0350	0x9A83      	BCF         SPP5_bit, BitPos(SPP5_bit+0) 
;ProyectoDeUnidad1.c,422 :: 		SPP6_bit = 0;
0x0352	0x9C83      	BCF         SPP6_bit, BitPos(SPP6_bit+0) 
;ProyectoDeUnidad1.c,423 :: 		SPP7_bit = 0;
0x0354	0x9E83      	BCF         SPP7_bit, BitPos(SPP7_bit+0) 
;ProyectoDeUnidad1.c,424 :: 		}
L_end_ApagarLeds:
0x0356	0x0012      	RETURN      0
; end of _ApagarLeds
_EncenderApagar:
;ProyectoDeUnidad1.c,36 :: 		EncenderApagar()
;ProyectoDeUnidad1.c,38 :: 		int repetir = 0;
0x0358	0x6A1E      	CLRF        EncenderApagar_repetir_L0 
0x035A	0x6A1F      	CLRF        EncenderApagar_repetir_L0+1 
;ProyectoDeUnidad1.c,39 :: 		while (repetir == 0)
L_EncenderApagar0:
0x035C	0x0E00      	MOVLW       0
0x035E	0x181F      	XORWF       EncenderApagar_repetir_L0+1, 0 
0x0360	0xE102      	BNZ         L__EncenderApagar153
0x0362	0x0E00      	MOVLW       0
0x0364	0x181E      	XORWF       EncenderApagar_repetir_L0, 0 
L__EncenderApagar153:
0x0366	0xE117      	BNZ         L_EncenderApagar1
;ProyectoDeUnidad1.c,41 :: 		continuar = 0;                       // Inicializamos la variable continuar
0x0368	0x6A1C      	CLRF        _continuar 
0x036A	0x6A1D      	CLRF        _continuar+1 
;ProyectoDeUnidad1.c,42 :: 		RD0_bit = 1;                         // Encendemos el led
0x036C	0x8083      	BSF         RD0_bit, BitPos(RD0_bit+0) 
;ProyectoDeUnidad1.c,43 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x036E	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;ProyectoDeUnidad1.c,44 :: 		while (continuar == 0);              // Esperamos el retraso de 1 segundo
L_EncenderApagar2:
0x0370	0x0E00      	MOVLW       0
0x0372	0x181D      	XORWF       _continuar+1, 0 
0x0374	0xE102      	BNZ         L__EncenderApagar154
0x0376	0x0E00      	MOVLW       0
0x0378	0x181C      	XORWF       _continuar, 0 
L__EncenderApagar154:
0x037A	0xE101      	BNZ         L_EncenderApagar3
0x037C	0xD7F9      	BRA         L_EncenderApagar2
L_EncenderApagar3:
;ProyectoDeUnidad1.c,45 :: 		RD0_bit = 0;                         // Apagamos el led
0x037E	0x9083      	BCF         RD0_bit, BitPos(RD0_bit+0) 
;ProyectoDeUnidad1.c,46 :: 		continuar = 0;                       // Reinicializamos la variable continuar
0x0380	0x6A1C      	CLRF        _continuar 
0x0382	0x6A1D      	CLRF        _continuar+1 
;ProyectoDeUnidad1.c,47 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x0384	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;ProyectoDeUnidad1.c,48 :: 		while (continuar == 0);              // Esperamos el retraso de 1 segundo
L_EncenderApagar4:
0x0386	0x0E00      	MOVLW       0
0x0388	0x181D      	XORWF       _continuar+1, 0 
0x038A	0xE102      	BNZ         L__EncenderApagar155
0x038C	0x0E00      	MOVLW       0
0x038E	0x181C      	XORWF       _continuar, 0 
L__EncenderApagar155:
0x0390	0xE101      	BNZ         L_EncenderApagar5
0x0392	0xD7F9      	BRA         L_EncenderApagar4
L_EncenderApagar5:
;ProyectoDeUnidad1.c,49 :: 		}
0x0394	0xD7E3      	BRA         L_EncenderApagar0
L_EncenderApagar1:
;ProyectoDeUnidad1.c,50 :: 		}
L_end_EncenderApagar:
0x0396	0x0012      	RETURN      0
; end of _EncenderApagar
_CorrimientoImparRegresoPar:
;ProyectoDeUnidad1.c,350 :: 		void CorrimientoImparRegresoPar()
;ProyectoDeUnidad1.c,352 :: 		int repetir = 0;
0x0398	0x6A1E      	CLRF        CorrimientoImparRegresoPar_repetir_L0 
0x039A	0x6A1F      	CLRF        CorrimientoImparRegresoPar_repetir_L0+1 
;ProyectoDeUnidad1.c,353 :: 		while (repetir == 0)
L_CorrimientoImparRegresoPar119:
0x039C	0x0E00      	MOVLW       0
0x039E	0x181F      	XORWF       CorrimientoImparRegresoPar_repetir_L0+1, 0 
0x03A0	0xE102      	BNZ         L__CorrimientoImparRegresoPar212
0x03A2	0x0E00      	MOVLW       0
0x03A4	0x181E      	XORWF       CorrimientoImparRegresoPar_repetir_L0, 0 
L__CorrimientoImparRegresoPar212:
0x03A6	0xA4D8      	BTFSS       STATUS, 2 
0x03A8	0xD061      	BRA         L_CorrimientoImparRegresoPar120
;ProyectoDeUnidad1.c,355 :: 		SPP0_bit = 1;                        // Encendemos el led
0x03AA	0x8083      	BSF         SPP0_bit, BitPos(SPP0_bit+0) 
;ProyectoDeUnidad1.c,357 :: 		continuar = 0;                       // Inicializamos el valor de la variable continuar
0x03AC	0x6A1C      	CLRF        _continuar 
0x03AE	0x6A1D      	CLRF        _continuar+1 
;ProyectoDeUnidad1.c,358 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x03B0	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;ProyectoDeUnidad1.c,359 :: 		while (continuar == 0){}             // Esperamos el retraso de un segundo
L_CorrimientoImparRegresoPar121:
0x03B2	0x0E00      	MOVLW       0
0x03B4	0x181D      	XORWF       _continuar+1, 0 
0x03B6	0xE102      	BNZ         L__CorrimientoImparRegresoPar213
0x03B8	0x0E00      	MOVLW       0
0x03BA	0x181C      	XORWF       _continuar, 0 
L__CorrimientoImparRegresoPar213:
0x03BC	0xE101      	BNZ         L_CorrimientoImparRegresoPar122
0x03BE	0xD7F9      	BRA         L_CorrimientoImparRegresoPar121
L_CorrimientoImparRegresoPar122:
;ProyectoDeUnidad1.c,361 :: 		SPP0_bit = 0;                        // Apagamos el led
0x03C0	0x9083      	BCF         SPP0_bit, BitPos(SPP0_bit+0) 
;ProyectoDeUnidad1.c,362 :: 		SPP2_bit = 1;                        // Encendemos el led
0x03C2	0x8483      	BSF         SPP2_bit, BitPos(SPP2_bit+0) 
;ProyectoDeUnidad1.c,364 :: 		continuar = 0;                       // Inicializamos el valor de la variable continuar
0x03C4	0x6A1C      	CLRF        _continuar 
0x03C6	0x6A1D      	CLRF        _continuar+1 
;ProyectoDeUnidad1.c,365 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x03C8	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;ProyectoDeUnidad1.c,366 :: 		while (continuar == 0){}             // Esperamos el retraso de un segundo
L_CorrimientoImparRegresoPar123:
0x03CA	0x0E00      	MOVLW       0
0x03CC	0x181D      	XORWF       _continuar+1, 0 
0x03CE	0xE102      	BNZ         L__CorrimientoImparRegresoPar214
0x03D0	0x0E00      	MOVLW       0
0x03D2	0x181C      	XORWF       _continuar, 0 
L__CorrimientoImparRegresoPar214:
0x03D4	0xE101      	BNZ         L_CorrimientoImparRegresoPar124
0x03D6	0xD7F9      	BRA         L_CorrimientoImparRegresoPar123
L_CorrimientoImparRegresoPar124:
;ProyectoDeUnidad1.c,368 :: 		SPP2_bit = 0;                        // Apagamos el led
0x03D8	0x9483      	BCF         SPP2_bit, BitPos(SPP2_bit+0) 
;ProyectoDeUnidad1.c,369 :: 		SPP4_bit = 1;                        // Encendemos el led
0x03DA	0x8883      	BSF         SPP4_bit, BitPos(SPP4_bit+0) 
;ProyectoDeUnidad1.c,371 :: 		continuar = 0;                       // Inicializamos el valor de la variable continuar
0x03DC	0x6A1C      	CLRF        _continuar 
0x03DE	0x6A1D      	CLRF        _continuar+1 
;ProyectoDeUnidad1.c,372 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x03E0	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;ProyectoDeUnidad1.c,373 :: 		while (continuar == 0){}             // Esperamos el retraso de un segundo
L_CorrimientoImparRegresoPar125:
0x03E2	0x0E00      	MOVLW       0
0x03E4	0x181D      	XORWF       _continuar+1, 0 
0x03E6	0xE102      	BNZ         L__CorrimientoImparRegresoPar215
0x03E8	0x0E00      	MOVLW       0
0x03EA	0x181C      	XORWF       _continuar, 0 
L__CorrimientoImparRegresoPar215:
0x03EC	0xE101      	BNZ         L_CorrimientoImparRegresoPar126
0x03EE	0xD7F9      	BRA         L_CorrimientoImparRegresoPar125
L_CorrimientoImparRegresoPar126:
;ProyectoDeUnidad1.c,375 :: 		SPP4_bit = 0;                        // Apagamos el led
0x03F0	0x9883      	BCF         SPP4_bit, BitPos(SPP4_bit+0) 
;ProyectoDeUnidad1.c,376 :: 		SPP6_bit = 1;                        // Encendemos el led
0x03F2	0x8C83      	BSF         SPP6_bit, BitPos(SPP6_bit+0) 
;ProyectoDeUnidad1.c,378 :: 		continuar = 0;                       // Inicializamos el valor de la variable continuar
0x03F4	0x6A1C      	CLRF        _continuar 
0x03F6	0x6A1D      	CLRF        _continuar+1 
;ProyectoDeUnidad1.c,379 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x03F8	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;ProyectoDeUnidad1.c,380 :: 		while (continuar == 0){}             // Esperamos el retraso de un segundo
L_CorrimientoImparRegresoPar127:
0x03FA	0x0E00      	MOVLW       0
0x03FC	0x181D      	XORWF       _continuar+1, 0 
0x03FE	0xE102      	BNZ         L__CorrimientoImparRegresoPar216
0x0400	0x0E00      	MOVLW       0
0x0402	0x181C      	XORWF       _continuar, 0 
L__CorrimientoImparRegresoPar216:
0x0404	0xE101      	BNZ         L_CorrimientoImparRegresoPar128
0x0406	0xD7F9      	BRA         L_CorrimientoImparRegresoPar127
L_CorrimientoImparRegresoPar128:
;ProyectoDeUnidad1.c,382 :: 		SPP6_bit = 0;                        // Apagamos el led
0x0408	0x9C83      	BCF         SPP6_bit, BitPos(SPP6_bit+0) 
;ProyectoDeUnidad1.c,383 :: 		SPP7_bit = 1;                        // Encendemos el led
0x040A	0x8E83      	BSF         SPP7_bit, BitPos(SPP7_bit+0) 
;ProyectoDeUnidad1.c,385 :: 		continuar = 0;                       // Inicializamos el valor de la variable continuar
0x040C	0x6A1C      	CLRF        _continuar 
0x040E	0x6A1D      	CLRF        _continuar+1 
;ProyectoDeUnidad1.c,386 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x0410	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;ProyectoDeUnidad1.c,387 :: 		while (continuar == 0){}             // Esperamos el retraso de un segundo
L_CorrimientoImparRegresoPar129:
0x0412	0x0E00      	MOVLW       0
0x0414	0x181D      	XORWF       _continuar+1, 0 
0x0416	0xE102      	BNZ         L__CorrimientoImparRegresoPar217
0x0418	0x0E00      	MOVLW       0
0x041A	0x181C      	XORWF       _continuar, 0 
L__CorrimientoImparRegresoPar217:
0x041C	0xE101      	BNZ         L_CorrimientoImparRegresoPar130
0x041E	0xD7F9      	BRA         L_CorrimientoImparRegresoPar129
L_CorrimientoImparRegresoPar130:
;ProyectoDeUnidad1.c,389 :: 		SPP7_bit = 0;                        // Apagamos el led
0x0420	0x9E83      	BCF         SPP7_bit, BitPos(SPP7_bit+0) 
;ProyectoDeUnidad1.c,390 :: 		SPP5_bit = 1;                        // Encendemos el led
0x0422	0x8A83      	BSF         SPP5_bit, BitPos(SPP5_bit+0) 
;ProyectoDeUnidad1.c,392 :: 		continuar = 0;                       // Inicializamos el valor de la variable continuar
0x0424	0x6A1C      	CLRF        _continuar 
0x0426	0x6A1D      	CLRF        _continuar+1 
;ProyectoDeUnidad1.c,393 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x0428	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;ProyectoDeUnidad1.c,394 :: 		while (continuar == 0){}             // Esperamos el retraso de un segundo
L_CorrimientoImparRegresoPar131:
0x042A	0x0E00      	MOVLW       0
0x042C	0x181D      	XORWF       _continuar+1, 0 
0x042E	0xE102      	BNZ         L__CorrimientoImparRegresoPar218
0x0430	0x0E00      	MOVLW       0
0x0432	0x181C      	XORWF       _continuar, 0 
L__CorrimientoImparRegresoPar218:
0x0434	0xE101      	BNZ         L_CorrimientoImparRegresoPar132
0x0436	0xD7F9      	BRA         L_CorrimientoImparRegresoPar131
L_CorrimientoImparRegresoPar132:
;ProyectoDeUnidad1.c,396 :: 		SPP5_bit = 0;                        // Apagamos el led
0x0438	0x9A83      	BCF         SPP5_bit, BitPos(SPP5_bit+0) 
;ProyectoDeUnidad1.c,397 :: 		SPP3_bit = 1;                        // Encendemos el led
0x043A	0x8683      	BSF         SPP3_bit, BitPos(SPP3_bit+0) 
;ProyectoDeUnidad1.c,399 :: 		continuar = 0;                       // Inicializamos el valor de la variable continuar
0x043C	0x6A1C      	CLRF        _continuar 
0x043E	0x6A1D      	CLRF        _continuar+1 
;ProyectoDeUnidad1.c,400 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x0440	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;ProyectoDeUnidad1.c,401 :: 		while (continuar == 0){}             // Esperamos el retraso de un segundo
L_CorrimientoImparRegresoPar133:
0x0442	0x0E00      	MOVLW       0
0x0444	0x181D      	XORWF       _continuar+1, 0 
0x0446	0xE102      	BNZ         L__CorrimientoImparRegresoPar219
0x0448	0x0E00      	MOVLW       0
0x044A	0x181C      	XORWF       _continuar, 0 
L__CorrimientoImparRegresoPar219:
0x044C	0xE101      	BNZ         L_CorrimientoImparRegresoPar134
0x044E	0xD7F9      	BRA         L_CorrimientoImparRegresoPar133
L_CorrimientoImparRegresoPar134:
;ProyectoDeUnidad1.c,403 :: 		SPP3_bit = 0;                        // Apagamos el led
0x0450	0x9683      	BCF         SPP3_bit, BitPos(SPP3_bit+0) 
;ProyectoDeUnidad1.c,404 :: 		SPP1_bit = 1;                        // Encendemos el led
0x0452	0x8283      	BSF         SPP1_bit, BitPos(SPP1_bit+0) 
;ProyectoDeUnidad1.c,406 :: 		continuar = 0;                       // Inicializamos el valor de la variable continuar
0x0454	0x6A1C      	CLRF        _continuar 
0x0456	0x6A1D      	CLRF        _continuar+1 
;ProyectoDeUnidad1.c,407 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x0458	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;ProyectoDeUnidad1.c,408 :: 		while (continuar == 0){}             // Esperamos el retraso de un segundo
L_CorrimientoImparRegresoPar135:
0x045A	0x0E00      	MOVLW       0
0x045C	0x181D      	XORWF       _continuar+1, 0 
0x045E	0xE102      	BNZ         L__CorrimientoImparRegresoPar220
0x0460	0x0E00      	MOVLW       0
0x0462	0x181C      	XORWF       _continuar, 0 
L__CorrimientoImparRegresoPar220:
0x0464	0xE101      	BNZ         L_CorrimientoImparRegresoPar136
0x0466	0xD7F9      	BRA         L_CorrimientoImparRegresoPar135
L_CorrimientoImparRegresoPar136:
;ProyectoDeUnidad1.c,410 :: 		SPP1_bit = 0;                        // Apagamos el led
0x0468	0x9283      	BCF         SPP1_bit, BitPos(SPP1_bit+0) 
;ProyectoDeUnidad1.c,411 :: 		}
0x046A	0xD798      	BRA         L_CorrimientoImparRegresoPar119
L_CorrimientoImparRegresoPar120:
;ProyectoDeUnidad1.c,412 :: 		}
L_end_CorrimientoImparRegresoPar:
0x046C	0x0012      	RETURN      0
; end of _CorrimientoImparRegresoPar
_ContadorAutomaticoHasta20:
;ProyectoDeUnidad1.c,334 :: 		void ContadorAutomaticoHasta20()
;ProyectoDeUnidad1.c,336 :: 		int repetir = 0;
0x046E	0x6A1E      	CLRF        ContadorAutomaticoHasta20_repetir_L0 
0x0470	0x6A1F      	CLRF        ContadorAutomaticoHasta20_repetir_L0+1 
;ProyectoDeUnidad1.c,337 :: 		while (repetir == 0)
L_ContadorAutomaticoHasta20112:
0x0472	0x0E00      	MOVLW       0
0x0474	0x181F      	XORWF       ContadorAutomaticoHasta20_repetir_L0+1, 0 
0x0476	0xE102      	BNZ         L__ContadorAutomaticoHasta20208
0x0478	0x0E00      	MOVLW       0
0x047A	0x181E      	XORWF       ContadorAutomaticoHasta20_repetir_L0, 0 
L__ContadorAutomaticoHasta20208:
0x047C	0xE11D      	BNZ         L_ContadorAutomaticoHasta20113
;ProyectoDeUnidad1.c,340 :: 		for (numero = 1; numero <= 20; numero++)
0x047E	0x0E01      	MOVLW       1
0x0480	0x6E01      	MOVWF       R1 
0x0482	0x0E00      	MOVLW       0
0x0484	0x6E02      	MOVWF       R2 
L_ContadorAutomaticoHasta20114:
0x0486	0x0E80      	MOVLW       128
0x0488	0x6E00      	MOVWF       R0 
0x048A	0x0E80      	MOVLW       128
0x048C	0x1802      	XORWF       R2, 0 
0x048E	0x5C00      	SUBWF       R0, 0 
0x0490	0xE102      	BNZ         L__ContadorAutomaticoHasta20209
0x0492	0x5001      	MOVF        R1, 0 
0x0494	0x0814      	SUBLW       20
L__ContadorAutomaticoHasta20209:
0x0496	0xE30F      	BNC         L_ContadorAutomaticoHasta20115
;ProyectoDeUnidad1.c,342 :: 		PORTD = numero;
0x0498	0xFF83C001  	MOVFF       R1, PORTD
;ProyectoDeUnidad1.c,343 :: 		continuar = 0;                       // Reinicializamos la variable continuar
0x049C	0x6A1C      	CLRF        _continuar 
0x049E	0x6A1D      	CLRF        _continuar+1 
;ProyectoDeUnidad1.c,344 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x04A0	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;ProyectoDeUnidad1.c,345 :: 		while (continuar == 0){}             // Esperamos el retraso de un segundo
L_ContadorAutomaticoHasta20117:
0x04A2	0x0E00      	MOVLW       0
0x04A4	0x181D      	XORWF       _continuar+1, 0 
0x04A6	0xE102      	BNZ         L__ContadorAutomaticoHasta20210
0x04A8	0x0E00      	MOVLW       0
0x04AA	0x181C      	XORWF       _continuar, 0 
L__ContadorAutomaticoHasta20210:
0x04AC	0xE101      	BNZ         L_ContadorAutomaticoHasta20118
0x04AE	0xD7F9      	BRA         L_ContadorAutomaticoHasta20117
L_ContadorAutomaticoHasta20118:
;ProyectoDeUnidad1.c,340 :: 		for (numero = 1; numero <= 20; numero++)
0x04B0	0x4A01      	INFSNZ      R1, 1 
0x04B2	0x2A02      	INCF        R2, 1 
;ProyectoDeUnidad1.c,346 :: 		}
0x04B4	0xD7E8      	BRA         L_ContadorAutomaticoHasta20114
L_ContadorAutomaticoHasta20115:
;ProyectoDeUnidad1.c,347 :: 		}
0x04B6	0xD7DD      	BRA         L_ContadorAutomaticoHasta20112
L_ContadorAutomaticoHasta20113:
;ProyectoDeUnidad1.c,348 :: 		}
L_end_ContadorAutomaticoHasta20:
0x04B8	0x0012      	RETURN      0
; end of _ContadorAutomaticoHasta20
_CorrimientoDeLedsDeIzquierdaADerecha:
;ProyectoDeUnidad1.c,227 :: 		void CorrimientoDeLedsDeIzquierdaADerecha()
;ProyectoDeUnidad1.c,229 :: 		int repetir = 0;
0x04BA	0x6A1E      	CLRF        CorrimientoDeLedsDeIzquierdaADerecha_repetir_L0 
0x04BC	0x6A1F      	CLRF        CorrimientoDeLedsDeIzquierdaADerecha_repetir_L0+1 
;ProyectoDeUnidad1.c,230 :: 		while (repetir == 0)
L_CorrimientoDeLedsDeIzquierdaADerecha82:
0x04BE	0x0E00      	MOVLW       0
0x04C0	0x181F      	XORWF       CorrimientoDeLedsDeIzquierdaADerecha_repetir_L0+1, 0 
0x04C2	0xE102      	BNZ         L__CorrimientoDeLedsDeIzquierdaADerecha192
0x04C4	0x0E00      	MOVLW       0
0x04C6	0x181E      	XORWF       CorrimientoDeLedsDeIzquierdaADerecha_repetir_L0, 0 
L__CorrimientoDeLedsDeIzquierdaADerecha192:
0x04C8	0xA4D8      	BTFSS       STATUS, 2 
0x04CA	0xD0A9      	BRA         L_CorrimientoDeLedsDeIzquierdaADerecha83
;ProyectoDeUnidad1.c,232 :: 		SPP0_bit = 1;
0x04CC	0x8083      	BSF         SPP0_bit, BitPos(SPP0_bit+0) 
;ProyectoDeUnidad1.c,233 :: 		continuar = 0;
0x04CE	0x6A1C      	CLRF        _continuar 
0x04D0	0x6A1D      	CLRF        _continuar+1 
;ProyectoDeUnidad1.c,235 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x04D2	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;ProyectoDeUnidad1.c,236 :: 		while (continuar == 0){}             // Esperamos el retraso de un segundo
L_CorrimientoDeLedsDeIzquierdaADerecha84:
0x04D4	0x0E00      	MOVLW       0
0x04D6	0x181D      	XORWF       _continuar+1, 0 
0x04D8	0xE102      	BNZ         L__CorrimientoDeLedsDeIzquierdaADerecha193
0x04DA	0x0E00      	MOVLW       0
0x04DC	0x181C      	XORWF       _continuar, 0 
L__CorrimientoDeLedsDeIzquierdaADerecha193:
0x04DE	0xE101      	BNZ         L_CorrimientoDeLedsDeIzquierdaADerecha85
0x04E0	0xD7F9      	BRA         L_CorrimientoDeLedsDeIzquierdaADerecha84
L_CorrimientoDeLedsDeIzquierdaADerecha85:
;ProyectoDeUnidad1.c,238 :: 		SPP0_bit = 0;
0x04E2	0x9083      	BCF         SPP0_bit, BitPos(SPP0_bit+0) 
;ProyectoDeUnidad1.c,239 :: 		SPP1_bit = 1;
0x04E4	0x8283      	BSF         SPP1_bit, BitPos(SPP1_bit+0) 
;ProyectoDeUnidad1.c,240 :: 		continuar = 0;
0x04E6	0x6A1C      	CLRF        _continuar 
0x04E8	0x6A1D      	CLRF        _continuar+1 
;ProyectoDeUnidad1.c,242 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x04EA	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;ProyectoDeUnidad1.c,243 :: 		while (continuar == 0){}             // Esperamos el retraso de un segundo
L_CorrimientoDeLedsDeIzquierdaADerecha86:
0x04EC	0x0E00      	MOVLW       0
0x04EE	0x181D      	XORWF       _continuar+1, 0 
0x04F0	0xE102      	BNZ         L__CorrimientoDeLedsDeIzquierdaADerecha194
0x04F2	0x0E00      	MOVLW       0
0x04F4	0x181C      	XORWF       _continuar, 0 
L__CorrimientoDeLedsDeIzquierdaADerecha194:
0x04F6	0xE101      	BNZ         L_CorrimientoDeLedsDeIzquierdaADerecha87
0x04F8	0xD7F9      	BRA         L_CorrimientoDeLedsDeIzquierdaADerecha86
L_CorrimientoDeLedsDeIzquierdaADerecha87:
;ProyectoDeUnidad1.c,245 :: 		SPP1_bit = 0;
0x04FA	0x9283      	BCF         SPP1_bit, BitPos(SPP1_bit+0) 
;ProyectoDeUnidad1.c,246 :: 		SPP2_bit = 1;
0x04FC	0x8483      	BSF         SPP2_bit, BitPos(SPP2_bit+0) 
;ProyectoDeUnidad1.c,247 :: 		continuar = 0;
0x04FE	0x6A1C      	CLRF        _continuar 
0x0500	0x6A1D      	CLRF        _continuar+1 
;ProyectoDeUnidad1.c,249 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x0502	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;ProyectoDeUnidad1.c,250 :: 		while (continuar == 0){}             // Esperamos el retraso de un segundo
L_CorrimientoDeLedsDeIzquierdaADerecha88:
0x0504	0x0E00      	MOVLW       0
0x0506	0x181D      	XORWF       _continuar+1, 0 
0x0508	0xE102      	BNZ         L__CorrimientoDeLedsDeIzquierdaADerecha195
0x050A	0x0E00      	MOVLW       0
0x050C	0x181C      	XORWF       _continuar, 0 
L__CorrimientoDeLedsDeIzquierdaADerecha195:
0x050E	0xE101      	BNZ         L_CorrimientoDeLedsDeIzquierdaADerecha89
0x0510	0xD7F9      	BRA         L_CorrimientoDeLedsDeIzquierdaADerecha88
L_CorrimientoDeLedsDeIzquierdaADerecha89:
;ProyectoDeUnidad1.c,252 :: 		SPP2_bit = 0;
0x0512	0x9483      	BCF         SPP2_bit, BitPos(SPP2_bit+0) 
;ProyectoDeUnidad1.c,253 :: 		SPP3_bit = 1;
0x0514	0x8683      	BSF         SPP3_bit, BitPos(SPP3_bit+0) 
;ProyectoDeUnidad1.c,254 :: 		continuar = 0;
0x0516	0x6A1C      	CLRF        _continuar 
0x0518	0x6A1D      	CLRF        _continuar+1 
;ProyectoDeUnidad1.c,256 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x051A	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;ProyectoDeUnidad1.c,257 :: 		while (continuar == 0){}             // Esperamos el retraso de un segundo
L_CorrimientoDeLedsDeIzquierdaADerecha90:
0x051C	0x0E00      	MOVLW       0
0x051E	0x181D      	XORWF       _continuar+1, 0 
0x0520	0xE102      	BNZ         L__CorrimientoDeLedsDeIzquierdaADerecha196
0x0522	0x0E00      	MOVLW       0
0x0524	0x181C      	XORWF       _continuar, 0 
L__CorrimientoDeLedsDeIzquierdaADerecha196:
0x0526	0xE101      	BNZ         L_CorrimientoDeLedsDeIzquierdaADerecha91
0x0528	0xD7F9      	BRA         L_CorrimientoDeLedsDeIzquierdaADerecha90
L_CorrimientoDeLedsDeIzquierdaADerecha91:
;ProyectoDeUnidad1.c,259 :: 		SPP3_bit = 0;
0x052A	0x9683      	BCF         SPP3_bit, BitPos(SPP3_bit+0) 
;ProyectoDeUnidad1.c,260 :: 		SPP4_bit = 1;
0x052C	0x8883      	BSF         SPP4_bit, BitPos(SPP4_bit+0) 
;ProyectoDeUnidad1.c,261 :: 		continuar = 0;
0x052E	0x6A1C      	CLRF        _continuar 
0x0530	0x6A1D      	CLRF        _continuar+1 
;ProyectoDeUnidad1.c,263 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x0532	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;ProyectoDeUnidad1.c,264 :: 		while (continuar == 0){}             // Esperamos el retraso de un segundo
L_CorrimientoDeLedsDeIzquierdaADerecha92:
0x0534	0x0E00      	MOVLW       0
0x0536	0x181D      	XORWF       _continuar+1, 0 
0x0538	0xE102      	BNZ         L__CorrimientoDeLedsDeIzquierdaADerecha197
0x053A	0x0E00      	MOVLW       0
0x053C	0x181C      	XORWF       _continuar, 0 
L__CorrimientoDeLedsDeIzquierdaADerecha197:
0x053E	0xE101      	BNZ         L_CorrimientoDeLedsDeIzquierdaADerecha93
0x0540	0xD7F9      	BRA         L_CorrimientoDeLedsDeIzquierdaADerecha92
L_CorrimientoDeLedsDeIzquierdaADerecha93:
;ProyectoDeUnidad1.c,266 :: 		SPP4_bit = 0;
0x0542	0x9883      	BCF         SPP4_bit, BitPos(SPP4_bit+0) 
;ProyectoDeUnidad1.c,267 :: 		SPP5_bit = 1;
0x0544	0x8A83      	BSF         SPP5_bit, BitPos(SPP5_bit+0) 
;ProyectoDeUnidad1.c,268 :: 		continuar = 0;
0x0546	0x6A1C      	CLRF        _continuar 
0x0548	0x6A1D      	CLRF        _continuar+1 
;ProyectoDeUnidad1.c,270 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x054A	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;ProyectoDeUnidad1.c,271 :: 		while (continuar == 0){}             // Esperamos el retraso de un segundo
L_CorrimientoDeLedsDeIzquierdaADerecha94:
0x054C	0x0E00      	MOVLW       0
0x054E	0x181D      	XORWF       _continuar+1, 0 
0x0550	0xE102      	BNZ         L__CorrimientoDeLedsDeIzquierdaADerecha198
0x0552	0x0E00      	MOVLW       0
0x0554	0x181C      	XORWF       _continuar, 0 
L__CorrimientoDeLedsDeIzquierdaADerecha198:
0x0556	0xE101      	BNZ         L_CorrimientoDeLedsDeIzquierdaADerecha95
0x0558	0xD7F9      	BRA         L_CorrimientoDeLedsDeIzquierdaADerecha94
L_CorrimientoDeLedsDeIzquierdaADerecha95:
;ProyectoDeUnidad1.c,273 :: 		SPP5_bit = 0;
0x055A	0x9A83      	BCF         SPP5_bit, BitPos(SPP5_bit+0) 
;ProyectoDeUnidad1.c,274 :: 		SPP6_bit = 1;
0x055C	0x8C83      	BSF         SPP6_bit, BitPos(SPP6_bit+0) 
;ProyectoDeUnidad1.c,275 :: 		continuar = 0;
0x055E	0x6A1C      	CLRF        _continuar 
0x0560	0x6A1D      	CLRF        _continuar+1 
;ProyectoDeUnidad1.c,277 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x0562	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;ProyectoDeUnidad1.c,278 :: 		while (continuar == 0){}             // Esperamos el retraso de un segundo
L_CorrimientoDeLedsDeIzquierdaADerecha96:
0x0564	0x0E00      	MOVLW       0
0x0566	0x181D      	XORWF       _continuar+1, 0 
0x0568	0xE102      	BNZ         L__CorrimientoDeLedsDeIzquierdaADerecha199
0x056A	0x0E00      	MOVLW       0
0x056C	0x181C      	XORWF       _continuar, 0 
L__CorrimientoDeLedsDeIzquierdaADerecha199:
0x056E	0xE101      	BNZ         L_CorrimientoDeLedsDeIzquierdaADerecha97
0x0570	0xD7F9      	BRA         L_CorrimientoDeLedsDeIzquierdaADerecha96
L_CorrimientoDeLedsDeIzquierdaADerecha97:
;ProyectoDeUnidad1.c,280 :: 		SPP6_bit = 0;
0x0572	0x9C83      	BCF         SPP6_bit, BitPos(SPP6_bit+0) 
;ProyectoDeUnidad1.c,281 :: 		SPP7_bit = 1;
0x0574	0x8E83      	BSF         SPP7_bit, BitPos(SPP7_bit+0) 
;ProyectoDeUnidad1.c,282 :: 		continuar = 0;
0x0576	0x6A1C      	CLRF        _continuar 
0x0578	0x6A1D      	CLRF        _continuar+1 
;ProyectoDeUnidad1.c,284 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x057A	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;ProyectoDeUnidad1.c,285 :: 		while (continuar == 0){}             // Esperamos el retraso de un segundo
L_CorrimientoDeLedsDeIzquierdaADerecha98:
0x057C	0x0E00      	MOVLW       0
0x057E	0x181D      	XORWF       _continuar+1, 0 
0x0580	0xE102      	BNZ         L__CorrimientoDeLedsDeIzquierdaADerecha200
0x0582	0x0E00      	MOVLW       0
0x0584	0x181C      	XORWF       _continuar, 0 
L__CorrimientoDeLedsDeIzquierdaADerecha200:
0x0586	0xE101      	BNZ         L_CorrimientoDeLedsDeIzquierdaADerecha99
0x0588	0xD7F9      	BRA         L_CorrimientoDeLedsDeIzquierdaADerecha98
L_CorrimientoDeLedsDeIzquierdaADerecha99:
;ProyectoDeUnidad1.c,287 :: 		SPP7_bit = 0;
0x058A	0x9E83      	BCF         SPP7_bit, BitPos(SPP7_bit+0) 
;ProyectoDeUnidad1.c,288 :: 		SPP6_bit = 1;
0x058C	0x8C83      	BSF         SPP6_bit, BitPos(SPP6_bit+0) 
;ProyectoDeUnidad1.c,289 :: 		continuar = 0;
0x058E	0x6A1C      	CLRF        _continuar 
0x0590	0x6A1D      	CLRF        _continuar+1 
;ProyectoDeUnidad1.c,291 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x0592	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;ProyectoDeUnidad1.c,292 :: 		while (continuar == 0){}             // Esperamos el retraso de un segundo
L_CorrimientoDeLedsDeIzquierdaADerecha100:
0x0594	0x0E00      	MOVLW       0
0x0596	0x181D      	XORWF       _continuar+1, 0 
0x0598	0xE102      	BNZ         L__CorrimientoDeLedsDeIzquierdaADerecha201
0x059A	0x0E00      	MOVLW       0
0x059C	0x181C      	XORWF       _continuar, 0 
L__CorrimientoDeLedsDeIzquierdaADerecha201:
0x059E	0xE101      	BNZ         L_CorrimientoDeLedsDeIzquierdaADerecha101
0x05A0	0xD7F9      	BRA         L_CorrimientoDeLedsDeIzquierdaADerecha100
L_CorrimientoDeLedsDeIzquierdaADerecha101:
;ProyectoDeUnidad1.c,295 :: 		SPP6_bit = 0;
0x05A2	0x9C83      	BCF         SPP6_bit, BitPos(SPP6_bit+0) 
;ProyectoDeUnidad1.c,296 :: 		SPP5_bit = 1;
0x05A4	0x8A83      	BSF         SPP5_bit, BitPos(SPP5_bit+0) 
;ProyectoDeUnidad1.c,297 :: 		continuar = 0;
0x05A6	0x6A1C      	CLRF        _continuar 
0x05A8	0x6A1D      	CLRF        _continuar+1 
;ProyectoDeUnidad1.c,299 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x05AA	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;ProyectoDeUnidad1.c,300 :: 		while (continuar == 0){}             // Esperamos el retraso de un segundo
L_CorrimientoDeLedsDeIzquierdaADerecha102:
0x05AC	0x0E00      	MOVLW       0
0x05AE	0x181D      	XORWF       _continuar+1, 0 
0x05B0	0xE102      	BNZ         L__CorrimientoDeLedsDeIzquierdaADerecha202
0x05B2	0x0E00      	MOVLW       0
0x05B4	0x181C      	XORWF       _continuar, 0 
L__CorrimientoDeLedsDeIzquierdaADerecha202:
0x05B6	0xE101      	BNZ         L_CorrimientoDeLedsDeIzquierdaADerecha103
0x05B8	0xD7F9      	BRA         L_CorrimientoDeLedsDeIzquierdaADerecha102
L_CorrimientoDeLedsDeIzquierdaADerecha103:
;ProyectoDeUnidad1.c,302 :: 		SPP5_bit = 0;
0x05BA	0x9A83      	BCF         SPP5_bit, BitPos(SPP5_bit+0) 
;ProyectoDeUnidad1.c,303 :: 		SPP4_bit = 1;
0x05BC	0x8883      	BSF         SPP4_bit, BitPos(SPP4_bit+0) 
;ProyectoDeUnidad1.c,304 :: 		continuar = 0;
0x05BE	0x6A1C      	CLRF        _continuar 
0x05C0	0x6A1D      	CLRF        _continuar+1 
;ProyectoDeUnidad1.c,306 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x05C2	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;ProyectoDeUnidad1.c,307 :: 		while (continuar == 0){}             // Esperamos el retraso de un segundo
L_CorrimientoDeLedsDeIzquierdaADerecha104:
0x05C4	0x0E00      	MOVLW       0
0x05C6	0x181D      	XORWF       _continuar+1, 0 
0x05C8	0xE102      	BNZ         L__CorrimientoDeLedsDeIzquierdaADerecha203
0x05CA	0x0E00      	MOVLW       0
0x05CC	0x181C      	XORWF       _continuar, 0 
L__CorrimientoDeLedsDeIzquierdaADerecha203:
0x05CE	0xE101      	BNZ         L_CorrimientoDeLedsDeIzquierdaADerecha105
0x05D0	0xD7F9      	BRA         L_CorrimientoDeLedsDeIzquierdaADerecha104
L_CorrimientoDeLedsDeIzquierdaADerecha105:
;ProyectoDeUnidad1.c,309 :: 		SPP4_bit = 0;
0x05D2	0x9883      	BCF         SPP4_bit, BitPos(SPP4_bit+0) 
;ProyectoDeUnidad1.c,310 :: 		SPP3_bit = 1;
0x05D4	0x8683      	BSF         SPP3_bit, BitPos(SPP3_bit+0) 
;ProyectoDeUnidad1.c,311 :: 		continuar = 0;
0x05D6	0x6A1C      	CLRF        _continuar 
0x05D8	0x6A1D      	CLRF        _continuar+1 
;ProyectoDeUnidad1.c,313 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x05DA	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;ProyectoDeUnidad1.c,314 :: 		while (continuar == 0){}             // Esperamos el retraso de un segundo
L_CorrimientoDeLedsDeIzquierdaADerecha106:
0x05DC	0x0E00      	MOVLW       0
0x05DE	0x181D      	XORWF       _continuar+1, 0 
0x05E0	0xE102      	BNZ         L__CorrimientoDeLedsDeIzquierdaADerecha204
0x05E2	0x0E00      	MOVLW       0
0x05E4	0x181C      	XORWF       _continuar, 0 
L__CorrimientoDeLedsDeIzquierdaADerecha204:
0x05E6	0xE101      	BNZ         L_CorrimientoDeLedsDeIzquierdaADerecha107
0x05E8	0xD7F9      	BRA         L_CorrimientoDeLedsDeIzquierdaADerecha106
L_CorrimientoDeLedsDeIzquierdaADerecha107:
;ProyectoDeUnidad1.c,316 :: 		SPP3_bit = 0;
0x05EA	0x9683      	BCF         SPP3_bit, BitPos(SPP3_bit+0) 
;ProyectoDeUnidad1.c,317 :: 		SPP2_bit = 1;
0x05EC	0x8483      	BSF         SPP2_bit, BitPos(SPP2_bit+0) 
;ProyectoDeUnidad1.c,318 :: 		continuar = 0;
0x05EE	0x6A1C      	CLRF        _continuar 
0x05F0	0x6A1D      	CLRF        _continuar+1 
;ProyectoDeUnidad1.c,320 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x05F2	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;ProyectoDeUnidad1.c,321 :: 		while (continuar == 0){}             // Esperamos el retraso de un segundo
L_CorrimientoDeLedsDeIzquierdaADerecha108:
0x05F4	0x0E00      	MOVLW       0
0x05F6	0x181D      	XORWF       _continuar+1, 0 
0x05F8	0xE102      	BNZ         L__CorrimientoDeLedsDeIzquierdaADerecha205
0x05FA	0x0E00      	MOVLW       0
0x05FC	0x181C      	XORWF       _continuar, 0 
L__CorrimientoDeLedsDeIzquierdaADerecha205:
0x05FE	0xE101      	BNZ         L_CorrimientoDeLedsDeIzquierdaADerecha109
0x0600	0xD7F9      	BRA         L_CorrimientoDeLedsDeIzquierdaADerecha108
L_CorrimientoDeLedsDeIzquierdaADerecha109:
;ProyectoDeUnidad1.c,323 :: 		SPP2_bit = 0;
0x0602	0x9483      	BCF         SPP2_bit, BitPos(SPP2_bit+0) 
;ProyectoDeUnidad1.c,324 :: 		SPP1_bit = 1;
0x0604	0x8283      	BSF         SPP1_bit, BitPos(SPP1_bit+0) 
;ProyectoDeUnidad1.c,325 :: 		continuar = 0;
0x0606	0x6A1C      	CLRF        _continuar 
0x0608	0x6A1D      	CLRF        _continuar+1 
;ProyectoDeUnidad1.c,327 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x060A	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;ProyectoDeUnidad1.c,328 :: 		while (continuar == 0){}             // Esperamos el retraso de un segundo
L_CorrimientoDeLedsDeIzquierdaADerecha110:
0x060C	0x0E00      	MOVLW       0
0x060E	0x181D      	XORWF       _continuar+1, 0 
0x0610	0xE102      	BNZ         L__CorrimientoDeLedsDeIzquierdaADerecha206
0x0612	0x0E00      	MOVLW       0
0x0614	0x181C      	XORWF       _continuar, 0 
L__CorrimientoDeLedsDeIzquierdaADerecha206:
0x0616	0xE101      	BNZ         L_CorrimientoDeLedsDeIzquierdaADerecha111
0x0618	0xD7F9      	BRA         L_CorrimientoDeLedsDeIzquierdaADerecha110
L_CorrimientoDeLedsDeIzquierdaADerecha111:
;ProyectoDeUnidad1.c,330 :: 		SPP1_bit = 0;
0x061A	0x9283      	BCF         SPP1_bit, BitPos(SPP1_bit+0) 
;ProyectoDeUnidad1.c,331 :: 		}
0x061C	0xD750      	BRA         L_CorrimientoDeLedsDeIzquierdaADerecha82
L_CorrimientoDeLedsDeIzquierdaADerecha83:
;ProyectoDeUnidad1.c,332 :: 		}
L_end_CorrimientoDeLedsDeIzquierdaADerecha:
0x061E	0x0012      	RETURN      0
; end of _CorrimientoDeLedsDeIzquierdaADerecha
___CC2DW:
;__Lib_System.c,21 :: 		
;__Lib_System.c,23 :: 		
_CC2DL_Loop1:
;__Lib_System.c,24 :: 		
0x0620	0x0009      	TBLRD*+
;__Lib_System.c,25 :: 		
0x0622	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System.c,26 :: 		
0x0626	0x0600      	DECF        R0, 1, 0
;__Lib_System.c,27 :: 		
0x0628	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System.c,28 :: 		
0x062A	0x0601      	DECF        R1, 1, 0
;__Lib_System.c,29 :: 		
0x062C	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System.c,31 :: 		
L_end___CC2DW:
0x062E	0x0012      	RETURN      0
; end of ___CC2DW
_configurar:
;ProyectoDeUnidad1.c,7 :: 		void configurar()
;ProyectoDeUnidad1.c,9 :: 		IPEN_bit = 1;                         // Activa las interrupciones de alto y bajo nivel
0x0630	0x8ED0      	BSF         IPEN_bit, BitPos(IPEN_bit+0) 
;ProyectoDeUnidad1.c,11 :: 		TRISD =   0;                          // Colocamos todo el puerto D de salida
0x0632	0x6A95      	CLRF        TRISD 
;ProyectoDeUnidad1.c,12 :: 		PORTD =   0;                          // Inicializamos el puerto D
0x0634	0x6A83      	CLRF        PORTD 
;ProyectoDeUnidad1.c,14 :: 		TRISA =   0xFF;                       // Colocamos todo el puerto A como entrada
0x0636	0x0EFF      	MOVLW       255
0x0638	0x6E92      	MOVWF       TRISA 
;ProyectoDeUnidad1.c,15 :: 		PORTA =   0;                          // Inicializamos el puerto A
0x063A	0x6A80      	CLRF        PORTA 
;ProyectoDeUnidad1.c,17 :: 		INTCON =  0xC0;                       // Habilitamos todas las interrupciones unmasked en el bit 7 y las interrupciones unmasked perifericas en el bit 6
0x063C	0x0EC0      	MOVLW       192
0x063E	0x6EF2      	MOVWF       INTCON 
;ProyectoDeUnidad1.c,20 :: 		TMR0IP_bit = 1;                       // Activamos el timer 0 como una interrupcion de alto nivel
0x0640	0x84F1      	BSF         TMR0IP_bit, BitPos(TMR0IP_bit+0) 
;ProyectoDeUnidad1.c,21 :: 		T0CON = 0x68;                         // Encendemos el bit 6, 5 y 3 en el TMR0. 6 = Contador de 8 bits. 5 = Se ubica externamente en el pin T0CKI. 3 = NO usa valores de prescala
0x0642	0x0E68      	MOVLW       104
0x0644	0x6ED5      	MOVWF       T0CON 
;ProyectoDeUnidad1.c,22 :: 		TMR0L = 0xFF;                         // Colocamos el timer con un valor inicial de 255 para que asi solo cuente 1 hasta llegar al desbordamiento en 256
0x0646	0x0EFF      	MOVLW       255
0x0648	0x6ED6      	MOVWF       TMR0L 
;ProyectoDeUnidad1.c,23 :: 		TMR0IE_bit = 1;                       // Activamos la opcion de que se sea permitido llamar la interrupcion por overflow
0x064A	0x8AF2      	BSF         TMR0IE_bit, BitPos(TMR0IE_bit+0) 
;ProyectoDeUnidad1.c,24 :: 		TMR0ON_bit = 1;                       // Encendemos el timer
0x064C	0x8ED5      	BSF         TMR0ON_bit, BitPos(TMR0ON_bit+0) 
;ProyectoDeUnidad1.c,27 :: 		TMR1IP_bit = 0;                      // Activamos el timer 1 como una interrucion de bajo nivel
0x064E	0x909F      	BCF         TMR1IP_bit, BitPos(TMR1IP_bit+0) 
;ProyectoDeUnidad1.c,28 :: 		TMR1H = 0x0A;                        // Valor inicial de TMR1
0x0650	0x0E0A      	MOVLW       10
0x0652	0x6ECF      	MOVWF       TMR1H 
;ProyectoDeUnidad1.c,29 :: 		TMR1L = 0xFF;
0x0654	0x0EFF      	MOVLW       255
0x0656	0x6ECE      	MOVWF       TMR1L 
;ProyectoDeUnidad1.c,30 :: 		TMR1CS_bit = 0;                      // Utilizamos el contador interno y no uno externo
0x0658	0x92CD      	BCF         TMR1CS_bit, BitPos(TMR1CS_bit+0) 
;ProyectoDeUnidad1.c,31 :: 		T1CKPS1_bit = T1CKPS0_bit = 1;       // Asignamos una escala de 1:8 poniendo como 1 el bit 5 y 4 de T1CON
0x065A	0x88CD      	BSF         T1CKPS0_bit, BitPos(T1CKPS0_bit+0) 
0x065C	0xB8CD      	BTFSC       T1CKPS0_bit, BitPos(T1CKPS0_bit+0) 
0x065E	0xD002      	BRA         L__configurar150
0x0660	0x9ACD      	BCF         T1CKPS1_bit, BitPos(T1CKPS1_bit+0) 
0x0662	0xD001      	BRA         L__configurar151
L__configurar150:
0x0664	0x8ACD      	BSF         T1CKPS1_bit, BitPos(T1CKPS1_bit+0) 
L__configurar151:
;ProyectoDeUnidad1.c,32 :: 		TMR1IE_bit = 1;                      // Habilitamos la interrupcion por OVERFLOW del TMR1
0x0666	0x809D      	BSF         TMR1IE_bit, BitPos(TMR1IE_bit+0) 
;ProyectoDeUnidad1.c,33 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x0668	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;ProyectoDeUnidad1.c,34 :: 		}
L_end_configurar:
0x066A	0x0012      	RETURN      0
; end of _configurar
_ElegirProceso:
;ProyectoDeUnidad1.c,426 :: 		void ElegirProceso()
;ProyectoDeUnidad1.c,428 :: 		switch (proceso)
0x066C	0xD012      	BRA         L_ElegirProceso137
;ProyectoDeUnidad1.c,430 :: 		case 1:
L_ElegirProceso139:
;ProyectoDeUnidad1.c,431 :: 		EncenderApagar();
0x066E	0xDE74      	RCALL       _EncenderApagar
;ProyectoDeUnidad1.c,432 :: 		break;
0x0670	0xD034      	BRA         L_ElegirProceso138
;ProyectoDeUnidad1.c,434 :: 		case 2:
L_ElegirProceso140:
;ProyectoDeUnidad1.c,435 :: 		ApagarLeds();
0x0672	0xDE69      	RCALL       _ApagarLeds
;ProyectoDeUnidad1.c,436 :: 		BasculacionConIncremento();
0x0674	0xDCD3      	RCALL       _BasculacionConIncremento
;ProyectoDeUnidad1.c,437 :: 		break;
0x0676	0xD031      	BRA         L_ElegirProceso138
;ProyectoDeUnidad1.c,439 :: 		case 3:
L_ElegirProceso141:
;ProyectoDeUnidad1.c,440 :: 		ApagarLeds();
0x0678	0xDE66      	RCALL       _ApagarLeds
;ProyectoDeUnidad1.c,441 :: 		CorrimientoDeLedsDeIzquierdaADerecha();
0x067A	0xDF1F      	RCALL       _CorrimientoDeLedsDeIzquierdaADerecha
;ProyectoDeUnidad1.c,442 :: 		break;
0x067C	0xD02E      	BRA         L_ElegirProceso138
;ProyectoDeUnidad1.c,444 :: 		case 4:
L_ElegirProceso142:
;ProyectoDeUnidad1.c,445 :: 		ApagarLeds();
0x067E	0xDE63      	RCALL       _ApagarLeds
;ProyectoDeUnidad1.c,446 :: 		ContadorAutomaticoHasta20();
0x0680	0xDEF6      	RCALL       _ContadorAutomaticoHasta20
;ProyectoDeUnidad1.c,447 :: 		break;
0x0682	0xD02B      	BRA         L_ElegirProceso138
;ProyectoDeUnidad1.c,449 :: 		case 5:
L_ElegirProceso143:
;ProyectoDeUnidad1.c,450 :: 		ApagarLeds();
0x0684	0xDE60      	RCALL       _ApagarLeds
;ProyectoDeUnidad1.c,451 :: 		CorrimientoImparRegresoPar();
0x0686	0xDE88      	RCALL       _CorrimientoImparRegresoPar
;ProyectoDeUnidad1.c,452 :: 		break;
0x0688	0xD028      	BRA         L_ElegirProceso138
;ProyectoDeUnidad1.c,454 :: 		case 6:
L_ElegirProceso144:
;ProyectoDeUnidad1.c,455 :: 		ApagarLeds();
0x068A	0xDE5D      	RCALL       _ApagarLeds
;ProyectoDeUnidad1.c,456 :: 		proceso = 0;
0x068C	0x6A1A      	CLRF        _proceso 
0x068E	0x6A1B      	CLRF        _proceso+1 
;ProyectoDeUnidad1.c,457 :: 		break;
0x0690	0xD024      	BRA         L_ElegirProceso138
;ProyectoDeUnidad1.c,458 :: 		}
L_ElegirProceso137:
0x0692	0x0E00      	MOVLW       0
0x0694	0x181B      	XORWF       _proceso+1, 0 
0x0696	0xE102      	BNZ         L__ElegirProceso223
0x0698	0x0E01      	MOVLW       1
0x069A	0x181A      	XORWF       _proceso, 0 
L__ElegirProceso223:
0x069C	0xE0E8      	BZ          L_ElegirProceso139
0x069E	0x0E00      	MOVLW       0
0x06A0	0x181B      	XORWF       _proceso+1, 0 
0x06A2	0xE102      	BNZ         L__ElegirProceso224
0x06A4	0x0E02      	MOVLW       2
0x06A6	0x181A      	XORWF       _proceso, 0 
L__ElegirProceso224:
0x06A8	0xE0E4      	BZ          L_ElegirProceso140
0x06AA	0x0E00      	MOVLW       0
0x06AC	0x181B      	XORWF       _proceso+1, 0 
0x06AE	0xE102      	BNZ         L__ElegirProceso225
0x06B0	0x0E03      	MOVLW       3
0x06B2	0x181A      	XORWF       _proceso, 0 
L__ElegirProceso225:
0x06B4	0xE0E1      	BZ          L_ElegirProceso141
0x06B6	0x0E00      	MOVLW       0
0x06B8	0x181B      	XORWF       _proceso+1, 0 
0x06BA	0xE102      	BNZ         L__ElegirProceso226
0x06BC	0x0E04      	MOVLW       4
0x06BE	0x181A      	XORWF       _proceso, 0 
L__ElegirProceso226:
0x06C0	0xE0DE      	BZ          L_ElegirProceso142
0x06C2	0x0E00      	MOVLW       0
0x06C4	0x181B      	XORWF       _proceso+1, 0 
0x06C6	0xE102      	BNZ         L__ElegirProceso227
0x06C8	0x0E05      	MOVLW       5
0x06CA	0x181A      	XORWF       _proceso, 0 
L__ElegirProceso227:
0x06CC	0xE0DB      	BZ          L_ElegirProceso143
0x06CE	0x0E00      	MOVLW       0
0x06D0	0x181B      	XORWF       _proceso+1, 0 
0x06D2	0xE102      	BNZ         L__ElegirProceso228
0x06D4	0x0E06      	MOVLW       6
0x06D6	0x181A      	XORWF       _proceso, 0 
L__ElegirProceso228:
0x06D8	0xE0D8      	BZ          L_ElegirProceso144
L_ElegirProceso138:
;ProyectoDeUnidad1.c,459 :: 		}
L_end_ElegirProceso:
0x06DA	0x0012      	RETURN      0
; end of _ElegirProceso
_main:
0x06DC	0x6A1A      	CLRF        _proceso 
0x06DE	0x6A1B      	CLRF        27 
0x06E0	0x6A1C      	CLRF        _continuar 
0x06E2	0x6A1D      	CLRF        29 
;ProyectoDeUnidad1.c,496 :: 		void main() {
;ProyectoDeUnidad1.c,497 :: 		configurar();
0x06E4	0xDFA5      	RCALL       _configurar
;ProyectoDeUnidad1.c,498 :: 		do{if (PORTA == 0x01);}
L_main145:
0x06E6	0x5080      	MOVF        PORTA, 0 
0x06E8	0x0A01      	XORLW       1
0x06EA	0xE100      	BNZ         L_main148
L_main148:
;ProyectoDeUnidad1.c,499 :: 		while (1);
0x06EC	0xD7FC      	BRA         L_main145
;ProyectoDeUnidad1.c,500 :: 		}
L_end_main:
0x06EE	0xD7FF      	BRA         $+0
; end of _main
_interrupt:
;ProyectoDeUnidad1.c,461 :: 		void interrupt(void) //Interrupcion de alto nivel (TMR0)
0x06F0	0xF019C000  	MOVFF       R0, 25
0x06F4	0xF018C001  	MOVFF       R1, 24
;ProyectoDeUnidad1.c,463 :: 		GIE_bit = 0;                       // Deshabilitamos todas las interrupciones globales
0x06F8	0x9EF2      	BCF         GIE_bit, BitPos(GIE_bit+0) 
;ProyectoDeUnidad1.c,464 :: 		TMR0ON_bit = 0;                    // Apagamos el timer de TMR0
0x06FA	0x9ED5      	BCF         TMR0ON_bit, BitPos(TMR0ON_bit+0) 
;ProyectoDeUnidad1.c,465 :: 		TMR0IF_bit = 0;                    // Apagamos la bandera de interrupcion por Overflow de TMR0
0x06FC	0x94F2      	BCF         TMR0IF_bit, BitPos(TMR0IF_bit+0) 
;ProyectoDeUnidad1.c,467 :: 		TMR0L = 0xFF;                      // Reiniciamos el valor de TMR0
0x06FE	0x0EFF      	MOVLW       255
0x0700	0x6ED6      	MOVWF       TMR0L 
;ProyectoDeUnidad1.c,469 :: 		ApagarLeds();
0x0702	0xDE21      	RCALL       _ApagarLeds
;ProyectoDeUnidad1.c,471 :: 		proceso++;                         // Cambiamos de proceso
0x0704	0x4A1A      	INFSNZ      _proceso, 1 
0x0706	0x2A1B      	INCF        _proceso+1, 1 
;ProyectoDeUnidad1.c,472 :: 		PORTD = 0;                         // Reiniciamos el PORTD
0x0708	0x6A83      	CLRF        PORTD 
;ProyectoDeUnidad1.c,475 :: 		TMR1ON_bit = 0;                     // Apagamos el timer de TMR1
0x070A	0x90CD      	BCF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;ProyectoDeUnidad1.c,476 :: 		TMR1IF_bit = 0;                     // Apagamos la bandera de interrupcion por Overflow de TMR1
0x070C	0x909E      	BCF         TMR1IF_bit, BitPos(TMR1IF_bit+0) 
;ProyectoDeUnidad1.c,477 :: 		TMR1L = 0x00;
0x070E	0x6ACE      	CLRF        TMR1L 
;ProyectoDeUnidad1.c,478 :: 		TMR1H = 0x00;                       // Reiniciamos el valor de TMR1
0x0710	0x6ACF      	CLRF        TMR1H 
;ProyectoDeUnidad1.c,480 :: 		TMR0ON_bit = 1;                    // Volvemos a encender el TMR0
0x0712	0x8ED5      	BSF         TMR0ON_bit, BitPos(TMR0ON_bit+0) 
;ProyectoDeUnidad1.c,481 :: 		GIE_bit = 1;                       // Volvemos a habilitar todas las interrupciones globales
0x0714	0x8EF2      	BSF         GIE_bit, BitPos(GIE_bit+0) 
;ProyectoDeUnidad1.c,483 :: 		ElegirProceso();                   // Volvemos a ver que proceso debe ejecturar
0x0716	0xDFAA      	RCALL       _ElegirProceso
;ProyectoDeUnidad1.c,484 :: 		}
L_end_interrupt:
L__interrupt230:
0x0718	0xF000C019  	MOVFF       25, R0
0x071C	0xF001C018  	MOVFF       24, R1
0x0720	0x0011      	RETFIE      1
; end of _interrupt
_interrupt_low:
0x0722	0x6E15      	MOVWF       ___Low_saveWREG 
0x0724	0xF016CFD8  	MOVFF       STATUS, ___Low_saveSTATUS
0x0728	0xF017CFE0  	MOVFF       BSR, ___Low_saveBSR
;ProyectoDeUnidad1.c,486 :: 		void interrupt_low(void)  //Interrupcion de bajo nivel (TMR1)
;ProyectoDeUnidad1.c,488 :: 		TMR1ON_bit = 0;                     // Apagamos el timer de TMR1
0x072C	0x90CD      	BCF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;ProyectoDeUnidad1.c,489 :: 		TMR1IF_bit = 0;                     // Apagamos la bandera de interrupcion por Overflow de TMR1
0x072E	0x909E      	BCF         TMR1IF_bit, BitPos(TMR1IF_bit+0) 
;ProyectoDeUnidad1.c,490 :: 		TMR1L = 0x00;
0x0730	0x6ACE      	CLRF        TMR1L 
;ProyectoDeUnidad1.c,491 :: 		TMR1H = 0x00;                       // Reiniciamos el valor de TMR1
0x0732	0x6ACF      	CLRF        TMR1H 
;ProyectoDeUnidad1.c,493 :: 		continuar = 1;                      // Permitimos que el programa se continue ejecutando
0x0734	0x0E01      	MOVLW       1
0x0736	0x6E1C      	MOVWF       _continuar 
0x0738	0x0E00      	MOVLW       0
0x073A	0x6E1D      	MOVWF       _continuar+1 
;ProyectoDeUnidad1.c,494 :: 		}
L_end_interrupt_low:
L__interrupt_low232:
0x073C	0x5017      	MOVF        ___Low_saveBSR, 0 
0x073E	0x6EE0      	MOVWF       BSR 
0x0740	0x5016      	MOVF        ___Low_saveSTATUS, 0 
0x0742	0x6ED8      	MOVWF       STATUS 
0x0744	0x3A15      	SWAPF       ___Low_saveWREG, 1 
0x0746	0x3815      	SWAPF       ___Low_saveWREG, 0 
0x0748	0x0010      	RETFIE      0
; end of _interrupt_low
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x001C     [810]    _BasculacionConIncremento
0x0346      [18]    _ApagarLeds
0x0358      [64]    _EncenderApagar
0x0398     [214]    _CorrimientoImparRegresoPar
0x046E      [76]    _ContadorAutomaticoHasta20
0x04BA     [358]    _CorrimientoDeLedsDeIzquierdaADerecha
0x0620      [16]    ___CC2DW
0x0630      [60]    _configurar
0x066C     [112]    _ElegirProceso
0x06DC      [20]    _main
0x06F0      [50]    _interrupt
0x0722      [40]    _interrupt_low
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    R0
0x0001       [2]    BasculacionConIncremento_repeticiones_L1
0x0001       [1]    R1
0x0001       [2]    ContadorAutomaticoHasta20_numero_L1
0x0002       [1]    R2
0x0003       [1]    R3
0x0004       [1]    R4
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0015       [1]    ___Low_saveWREG
0x0016       [1]    ___Low_saveSTATUS
0x0017       [1]    ___Low_saveBSR
0x001A       [2]    _proceso
0x001C       [2]    _continuar
0x001E       [2]    CorrimientoDeLedsDeIzquierdaADerecha_repetir_L0
0x001E       [2]    ContadorAutomaticoHasta20_repetir_L0
0x001E       [2]    EncenderApagar_repetir_L0
0x001E       [2]    BasculacionConIncremento_repetir_L0
0x001E       [2]    CorrimientoImparRegresoPar_repetir_L0
0x0F80       [1]    PORTA
0x0F83       [0]    SPP2_bit
0x0F83       [0]    SPP3_bit
0x0F83       [0]    SPP0_bit
0x0F83       [0]    SPP1_bit
0x0F83       [0]    SPP4_bit
0x0F83       [1]    PORTD
0x0F83       [0]    RD0_bit
0x0F83       [0]    SPP5_bit
0x0F83       [0]    SPP6_bit
0x0F83       [0]    SPP7_bit
0x0F92       [1]    TRISA
0x0F95       [1]    TRISD
0x0F9D       [0]    TMR1IE_bit
0x0F9E       [0]    TMR1IF_bit
0x0F9F       [0]    TMR1IP_bit
0x0FCD       [0]    T1CKPS1_bit
0x0FCD       [0]    T1CKPS0_bit
0x0FCD       [0]    TMR1ON_bit
0x0FCD       [0]    TMR1CS_bit
0x0FCE       [1]    TMR1L
0x0FCF       [1]    TMR1H
0x0FD0       [0]    IPEN_bit
0x0FD5       [0]    TMR0ON_bit
0x0FD5       [1]    T0CON
0x0FD6       [1]    TMR0L
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF1       [0]    TMR0IP_bit
0x0FF2       [0]    GIE_bit
0x0FF2       [1]    INTCON
0x0FF2       [0]    TMR0IE_bit
0x0FF2       [0]    TMR0IF_bit
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
