;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 22/10/2018 17:23:06
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF000EF4C  	GOTO        152
_interrupt:
;MyProject.c,21 :: 		void interrupt()
;MyProject.c,23 :: 		TMR1ON_bit = 0;                      // Apagamos el timer de TMR1
0x0008	0x90CD      	BCF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;MyProject.c,24 :: 		TMR1IF_bit = 0;                      // Apagamos la bandera de interrupcion por Overflow de TMR1
0x000A	0x909E      	BCF         TMR1IF_bit, BitPos(TMR1IF_bit+0) 
;MyProject.c,26 :: 		TMR1L = 0x00;
0x000C	0x6ACE      	CLRF        TMR1L 
;MyProject.c,27 :: 		TMR1H = 0x00;                        // Reiniciamos el valor de TMR1
0x000E	0x6ACF      	CLRF        TMR1H 
;MyProject.c,29 :: 		continuar = 1;                       // Permitimos que el programa se continue ejecutando
0x0010	0x0E01      	MOVLW       1
0x0012	0x6E15      	MOVWF       _continuar 
0x0014	0x0E00      	MOVLW       0
0x0016	0x6E16      	MOVWF       _continuar+1 
;MyProject.c,33 :: 		}
L_end_interrupt:
L__interrupt12:
0x0018	0x0011      	RETFIE      1
; end of _interrupt
_configurar:
;MyProject.c,6 :: 		void configurar()
;MyProject.c,8 :: 		TRISD =   0;                         // Ponemos el puerto D como salida
0x001A	0x6A95      	CLRF        TRISD 
;MyProject.c,9 :: 		PORTD =   0;                         // Inicializamos el puerto D
0x001C	0x6A83      	CLRF        PORTD 
;MyProject.c,12 :: 		TMR1H = 0x22;                        // Valor inicial de TMR1
0x001E	0x0E22      	MOVLW       34
0x0020	0x6ECF      	MOVWF       TMR1H 
;MyProject.c,13 :: 		TMR1L = 0x00;
0x0022	0x6ACE      	CLRF        TMR1L 
;MyProject.c,14 :: 		TMR1CS_bit = 0;                      // Utilizamos el contador interno y no uno externo
0x0024	0x92CD      	BCF         TMR1CS_bit, BitPos(TMR1CS_bit+0) 
;MyProject.c,15 :: 		T1CKPS1_bit = T1CKPS0_bit = 1;       // Asignamos una escala de 1:8 poniendo como 1 el bit 5 y 4 de T1CON
0x0026	0x88CD      	BSF         T1CKPS0_bit, BitPos(T1CKPS0_bit+0) 
0x0028	0xB8CD      	BTFSC       T1CKPS0_bit, BitPos(T1CKPS0_bit+0) 
0x002A	0xD002      	BRA         L__configurar9
0x002C	0x9ACD      	BCF         T1CKPS1_bit, BitPos(T1CKPS1_bit+0) 
0x002E	0xD001      	BRA         L__configurar10
L__configurar9:
0x0030	0x8ACD      	BSF         T1CKPS1_bit, BitPos(T1CKPS1_bit+0) 
L__configurar10:
;MyProject.c,16 :: 		TMR1IE_bit = 1;                      // Habilitamos la interrupcion por OVERFLOW del TMR1
0x0032	0x809D      	BSF         TMR1IE_bit, BitPos(TMR1IE_bit+0) 
;MyProject.c,17 :: 		INTCON = 0xC0;                       // Habilitamos todas las interrupciones unmasked en el bit 7 y las interrupciones unmasked perifericas en el bit 6
0x0034	0x0EC0      	MOVLW       192
0x0036	0x6EF2      	MOVWF       INTCON 
;MyProject.c,18 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x0038	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;MyProject.c,19 :: 		}
L_end_configurar:
0x003A	0x0012      	RETURN      0
; end of _configurar
_encenderApagar:
;MyProject.c,35 :: 		encenderApagar()
;MyProject.c,37 :: 		if(contador<255)
0x003C	0x0E80      	MOVLW       128
0x003E	0x1818      	XORWF       _contador+1, 0 
0x0040	0x6E00      	MOVWF       R0 
0x0042	0x0E80      	MOVLW       128
0x0044	0x5C00      	SUBWF       R0, 0 
0x0046	0xE102      	BNZ         L__encenderApagar14
0x0048	0x0EFF      	MOVLW       255
0x004A	0x5C17      	SUBWF       _contador, 0 
L__encenderApagar14:
0x004C	0xE203      	BC          L_encenderApagar0
;MyProject.c,38 :: 		{ contador++;}
0x004E	0x4A17      	INFSNZ      _contador, 1 
0x0050	0x2A18      	INCF        _contador+1, 1 
0x0052	0xD002      	BRA         L_encenderApagar1
L_encenderApagar0:
;MyProject.c,39 :: 		else{contador = 0;}
0x0054	0x6A17      	CLRF        _contador 
0x0056	0x6A18      	CLRF        _contador+1 
L_encenderApagar1:
;MyProject.c,40 :: 		PORTD=contador;
0x0058	0xFF83C017  	MOVFF       _contador, PORTD
;MyProject.c,43 :: 		continuar = 0;                       // Inicializamos la variable continuar
0x005C	0x6A15      	CLRF        _continuar 
0x005E	0x6A16      	CLRF        _continuar+1 
;MyProject.c,46 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x0060	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;MyProject.c,47 :: 		while (continuar == 0);              // Esperamos el retraso de 1 segundo
L_encenderApagar2:
0x0062	0x0E00      	MOVLW       0
0x0064	0x1816      	XORWF       _continuar+1, 0 
0x0066	0xE102      	BNZ         L__encenderApagar15
0x0068	0x0E00      	MOVLW       0
0x006A	0x1815      	XORWF       _continuar, 0 
L__encenderApagar15:
0x006C	0xE101      	BNZ         L_encenderApagar3
0x006E	0xD7F9      	BRA         L_encenderApagar2
L_encenderApagar3:
;MyProject.c,48 :: 		RD0_bit = 0;                         // Apagamos el led
0x0070	0x9083      	BCF         RD0_bit, BitPos(RD0_bit+0) 
;MyProject.c,49 :: 		continuar = 0;                       // Reinicializamos la variable continuar
0x0072	0x6A15      	CLRF        _continuar 
0x0074	0x6A16      	CLRF        _continuar+1 
;MyProject.c,50 :: 		TMR1ON_bit = 1;                      // Encendemos el timer de TMR1
0x0076	0x80CD      	BSF         TMR1ON_bit, BitPos(TMR1ON_bit+0) 
;MyProject.c,51 :: 		while (continuar == 0);              // Esperamos el retraso de 1 segundo
L_encenderApagar4:
0x0078	0x0E00      	MOVLW       0
0x007A	0x1816      	XORWF       _continuar+1, 0 
0x007C	0xE102      	BNZ         L__encenderApagar16
0x007E	0x0E00      	MOVLW       0
0x0080	0x1815      	XORWF       _continuar, 0 
L__encenderApagar16:
0x0082	0xE101      	BNZ         L_encenderApagar5
0x0084	0xD7F9      	BRA         L_encenderApagar4
L_encenderApagar5:
;MyProject.c,52 :: 		}
L_end_encenderApagar:
0x0086	0x0012      	RETURN      0
; end of _encenderApagar
___CC2DW:
;__Lib_System.c,21 :: 		
;__Lib_System.c,23 :: 		
_CC2DL_Loop1:
;__Lib_System.c,24 :: 		
0x0088	0x0009      	TBLRD*+
;__Lib_System.c,25 :: 		
0x008A	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System.c,26 :: 		
0x008E	0x0600      	DECF        R0, 1, 0
;__Lib_System.c,27 :: 		
0x0090	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System.c,28 :: 		
0x0092	0x0601      	DECF        R1, 1, 0
;__Lib_System.c,29 :: 		
0x0094	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System.c,31 :: 		
L_end___CC2DW:
0x0096	0x0012      	RETURN      0
; end of ___CC2DW
_main:
0x0098	0x6A15      	CLRF        _continuar 
0x009A	0x6A16      	CLRF        22 
0x009C	0x6A17      	CLRF        _contador 
0x009E	0x6A18      	CLRF        24 
;MyProject.c,54 :: 		void main() {
;MyProject.c,55 :: 		configurar();
0x00A0	0xDFBC      	RCALL       _configurar
;MyProject.c,56 :: 		while(1)
L_main6:
;MyProject.c,58 :: 		encenderApagar();
0x00A2	0xDFCC      	RCALL       _encenderApagar
;MyProject.c,59 :: 		}
0x00A4	0xD7FE      	BRA         L_main6
;MyProject.c,60 :: 		}
L_end_main:
0x00A6	0xD7FF      	BRA         $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0008      [18]    _interrupt
0x001A      [34]    _configurar
0x003C      [76]    _encenderApagar
0x0088      [16]    ___CC2DW
0x0098      [16]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    UART1_Init_tmp_L0
0x0000       [1]    FLASH_Erase_64_SaveINTCON_L0
0x0000       [1]    __Lib_SoftI2C_PutZerosToLATSda_temp_sda_L0
0x0000       [1]    SPI1_Write_tmp_L0
0x0000       [1]    R0
0x0000       [1]    EEPROM_Write_SaveINTCON_L0
0x0000       [1]    __Lib_SoftI2C_PutZerosToLATScl_temp_scl_L0
0x0001       [1]    FLASH_Erase_Write_64_i_L0
0x0001       [1]    __Lib_TFT_JPEG_FileRead_i_L0
0x0001       [1]    __Lib_TFT_16bit_JPEG_FileReadBytes_Result_L0
0x0001       [1]    UART1_Read___tmp_UART1_Read_L0
0x0001       [1]    R1
0x0001       [1]    ispunct_rslt_L0
0x0001       [2]    FLASH_Read_N_Bytes_i_L0
0x0001       [1]    FLASH_Write_32_i_L0
0x0001       [1]    __Lib_TFT_16bit_JPEG_FileRead_i_L0
0x0001       [1]    I2C1_Rd_tmp_L0
0x0001       [1]    __Lib_TFT_JPEG_FileReadBytes_Result_L0
0x0001       [1]    __Lib_PS2_Wait_Falling_nsample_L0
0x0002       [2]    strlen_cp_L0
0x0002       [1]    R2
0x0002       [1]    FLASH_Erase_Write_64_j_L0
0x0002       [2]    memcpy_dd_L0
0x0002       [1]    __Lib_USB_genHID_USB_CtrlTrf_Rx_Service_byteToRead_L0
0x0002       [1]    FLASH_Write_32_SaveINTCON_L0
0x0002       [2]    __Lib_USB_genHID_memset_usb_int_pp_L0
0x0002       [2]    __Lib_USB_genHID_memset_usb_pp_L0
0x0002       [2]    memchr_s_L0
0x0002       [2]    memset_pp_L0
0x0003       [2]    MM_TotalFreeMemSize_Tot_L0
0x0003       [1]    __Lib_USB_genHID_USB_CtrlTrf_Rx_Service_i_L0
0x0003       [1]    R3
0x0003       [2]    __Lib_USB_genHID_USB_CtrlTrf_Tx_Service_byteToSend_L0
0x0003       [1]    FLASH_Erase_Write_64_SaveINTCON_L0
0x0003       [2]    __Lib_MmcFat16_f16_toInt_l_L0
0x0003       [2]    Ltrim_original_L0
0x0003       [1]    MM_Init_i_L0
0x0003       [2]    memmove_tt_L0
0x0004       [2]    __Lib_USB_genHID_USB_Get_Status_Handler_p_L2
0x0004       [2]    strcpy_cp_L0
0x0004       [2]    __Lib_USB_genHID_USB_Transfer_Packet_handle_L0
0x0004       [1]    R4
0x0004       [2]    __Lib_USB_genHID_USB_Std_Feature_Req_Handler_p_L0
0x0004       [1]    __Lib_USB_genHID_GetMaxIndexInDevDsc_index_L0
0x0004       [2]    strncat_cp_L0
0x0004       [2]    __Lib_USB_genHID_USB_Transfer_Packet_Int_handle_L0
0x0004       [2]    frexp_pom_L0
0x0004       [2]    strncpy_cp_L0
0x0004       [2]    strcat_cp_L0
0x0004       [2]    memcpy_ss_L0
0x0004       [2]    __Lib_MemManager_MM_GetMemAlign_P_L0
0x0005       [1]    R5
0x0005       [2]    __Lib_USB_genHID_USB_Configure_Endpoint_handle_L0
0x0005       [2]    Ltrim_p_L0
0x0005       [2]    LongIntToHex_input_half_L0
0x0005       [1]    MM_TotalFreeMemSize_i_L0
0x0005       [2]    memmove_ff_L0
0x0005       [2]    LongWordToHex_input_half_L0
0x0006       [1]    R6
0x0006       [2]    __Lib_USB_genHID_GetMaxIndexInConfigDsc_totalLen_L0
0x0006       [1]    __Lib_MemManager_MM_GetMemAlign_i_L0
0x0007       [1]    __Lib_TFT_JPEG_GenerateHuffmanTables_bLength_L0
0x0007       [1]    __Lib_TFT_16bit_JPEG_GenerateHuffmanTables_bLength_L0
0x0007       [1]    R7
0x0008       [1]    __Lib_TFT_16bit_JPEG_GenerateHuffmanTables_bTable_L0
0x0008       [3]    __Lib_USB_genHID_GetMaxIndexInConfigDsc_ptr_L0
0x0008       [1]    R8
0x0008       [1]    __Lib_TFT_JPEG_GenerateHuffmanTables_bTable_L0
0x0009       [4]    __Lib_MmcFat16_f16_toLong_l_L0
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0015       [2]    _continuar
0x0017       [2]    _contador
0x0F83       [1]    PORTD
0x0F83       [0]    RD0_bit
0x0F95       [1]    TRISD
0x0F9D       [0]    TMR1IE_bit
0x0F9E       [0]    TMR1IF_bit
0x0FCD       [0]    TMR1CS_bit
0x0FCD       [0]    TMR1ON_bit
0x0FCD       [0]    T1CKPS0_bit
0x0FCD       [0]    T1CKPS1_bit
0x0FCE       [1]    TMR1L
0x0FCF       [1]    TMR1H
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF2       [1]    INTCON
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
//** Label List: ** 
//----------------------------------------------
  L_encenderApagar0
  L_encenderApagar1
  L_encenderApagar2
  L_encenderApagar3
  L_encenderApagar4
  L_encenderApagar5
  L_main6
  L_main7
  L_end_configurar
  _configurar
  L__configurar9
  L__configurar10
  L_end_interrupt
  _interrupt
  L__interrupt12
  L_end_encenderApagar
  _encenderApagar
  L__encenderApagar14
  L__encenderApagar15
  L__encenderApagar16
  L_end_main
  _main
  _CC2D_Loop1
  _CC2DL_Loop1
  L_loopCA2AWs
  L_loopCCA2AWs
  L_loopCS2Ss
  L_CS2Send
  L_loopCCS2Ss
  L_CCS2Send
  L_loopFZinSWs
  L_longjmp7
  L_end___CC2D
  ___CC2D
  L_end___CC2DW
  ___CC2DW
  L_end___CA2AW
  ___CA2AW
  L_end___CCA2AW
  ___CCA2AW
  L_end___CS2S
  ___CS2S
  L_end___CCS2S
  ___CCS2S
  L_end___FZinS
  ___FZinS
  L_end_____DoIFC
  _____DoIFC
  L_end_Swap
  _Swap
  L_end_setjmp
  _setjmp
  L_end_longjmp
  _longjmp
  L_encenderApagar0
  L_encenderApagar1
  L_encenderApagar2
  L_encenderApagar3
  L_encenderApagar4
  L_encenderApagar5
  L_main6
  L_main7
  L_end_configurar
  _configurar
  L__configurar9
  L__configurar10
  L_end_interrupt
  _interrupt
  L__interrupt12
  L_end_encenderApagar
  _encenderApagar
  L__encenderApagar14
  L__encenderApagar15
  L__encenderApagar16
  L_end_main
  _main
